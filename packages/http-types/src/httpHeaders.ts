/**
 * This file is generated by the `build/generateHttpTypes.ts` script.
 * To run it, run `npm run build`.
 * Do NOT edit this file directly.
 */

/**
 * The A-IM request-header field is similar to Accept, but
 * restricts the instance-manipulations that are acceptable in
 * the response. A response may be the result of applying
 * multiple instance-manipulations. When an A-IM request-header
 * field includes one or more delta-coding values, the request
 * MUST contain an If-None-Match header field, listing one or
 * more entity tags from prior responses for the request-URI.
 *
 * @see [Documentation → RFC 3229 §10.5.3](https://datatracker.ietf.org/doc/html/rfc3229#section-10.5.3)
 * @see [Specification → RFC 3229](https://webconcepts.info/specs/IETF/RFC/3229)
 */
export type HttpHeaderAIM = 'A-IM';

/**
 * Clients include the ALPN header field in an HTTP CONNECT
 * request to indicate the application-layer protocol that a
 * client intends to use within the tunnel, or a set of
 * protocols that might be used within the tunnel.
 *
 * @see [Documentation → RFC 7639 §2](https://datatracker.ietf.org/doc/html/rfc7639#section-2)
 * @see [Specification → RFC 7639](https://webconcepts.info/specs/IETF/RFC/7639)
 */
export type HttpHeaderALPN = 'ALPN';

/**
 * The "Accept" header field can be used by user agents to
 * specify response media types that are acceptable. Accept
 * header fields can be used to indicate that the request is
 * specifically limited to a small set of desired types, as in
 * the case of a request for an in-line image.
 *
 * @see [Documentation → RFC 7231 §5.3.2](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderAccept = 'Accept';

/**
 * In HTTP, the "Accept" request-header field is used to
 * specify media types which are acceptable for the response.
 * However, in HTCPCP, the response may result in additional
 * actions on the part of the automated pot. For this reason,
 * HTCPCP adds a new header field, "Accept-Additions".
 *
 * @see [Documentation → RFC 2324 §2.2.2.1](https://datatracker.ietf.org/doc/html/rfc2324#section-2.2.2.1)
 * @see [Documentation → RFC 7168 §2.2.1](https://datatracker.ietf.org/doc/html/rfc7168#section-2.2.1)
 * @see [Specification → RFC 2324](https://webconcepts.info/specs/IETF/RFC/2324)
 * @see [Specification → RFC 7168](https://webconcepts.info/specs/IETF/RFC/7168)
 */
export type HttpHeaderAcceptAdditions = 'Accept-Additions';

/**
 * The Accept-CH response header field or the equivalent HTML
 * meta element with http-equiv attribute (HTML5) indicate
 * server support for particular hints indicated in its value.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-client-hints §3.1](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-client-hints#section-3.1)
 * @see [Specification → Internet Draft ietf-httpbis-client-hints](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-client-hints)
 */
export type HttpHeaderAcceptCH = 'Accept-CH';

/**
 * The "Accept-Charset" header field can be sent by a user
 * agent to indicate what charsets are acceptable in textual
 * response content. This field allows user agents capable of
 * understanding more comprehensive or special-purpose charsets
 * to signal that capability to an origin server that is
 * capable of representing information in those charsets.
 *
 * @see [Documentation → RFC 7231 §5.3.3](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.3)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderAcceptCharset = 'Accept-Charset';

/**
 * The "Accept-Datetime" request header is transmitted by a
 * user agent to indicate it wants to access a past state of an
 * Original Resource. To that end, the "Accept-Datetime" header
 * is conveyed in an HTTP request issued against a TimeGate for
 * an Original Resource, and its value indicates the datetime
 * of the desired past state of the Original Resource.
 *
 * @see [Documentation → RFC 7089 §2.1.1](https://datatracker.ietf.org/doc/html/rfc7089#section-2.1.1)
 * @see [Specification → RFC 7089](https://webconcepts.info/specs/IETF/RFC/7089)
 */
export type HttpHeaderAcceptDatetime = 'Accept-Datetime';

/**
 * Section 5.3.4 of RFC 7231 defines "Accept-Encoding" as a
 * request header field only. This specification expands that
 * definition to allow "Accept-Encoding" as a response header
 * field as well. When present in a response, it indicates what
 * content codings the resource was willing to accept in the
 * associated request. A field value that only contains
 * "identity" implies that no content codings were supported.
 *
 * @see [Documentation → RFC 7694 §3](https://datatracker.ietf.org/doc/html/rfc7694#section-3)
 * @see [Documentation → RFC 7231 §5.3.4](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.4)
 * @see [Specification → RFC 7694](https://webconcepts.info/specs/IETF/RFC/7694)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderAcceptEncoding = 'Accept-Encoding';

/**
 * The Accept-Features request header can be used by a user
 * agent to give information about the presence or absence of
 * certain features in the feature set of the current request.
 * Servers can use this information when running a remote
 * variant selection algorithm.
 *
 * @see [Documentation → RFC 2295 §8.2](https://datatracker.ietf.org/doc/html/rfc2295#section-8.2)
 * @see [Specification → RFC 2295](https://webconcepts.info/specs/IETF/RFC/2295)
 */
export type HttpHeaderAcceptFeatures = 'Accept-Features';

/**
 * The Accept-Indefinite-Ranges request-header field allows the
 * client to indicate its acceptance of indefinite-sized range
 * requests for a resource.
 *
 * @see [Documentation → Internet Draft combs-http-indeterminate-range §2.1](https://datatracker.ietf.org/doc/html/draft-combs-http-indeterminate-range#section-2.1)
 * @see [Specification → Internet Draft combs-http-indeterminate-range](https://webconcepts.info/specs/IETF/I-D/combs-http-indeterminate-range)
 */
export type HttpHeaderAcceptIndefiniteRanges = 'Accept-Indefinite-Ranges';

/**
 * The "Accept-Language" header field can be used by user
 * agents to indicate the set of natural languages that are
 * preferred in the response.
 *
 * @see [Documentation → RFC 7231 §5.3.5](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderAcceptLanguage = 'Accept-Language';

/**
 * This specification introduces a new response header
 * Accept-Patch used to specify the patch document formats
 * accepted by the server. Accept-Patch SHOULD appear in the
 * OPTIONS response for any resource that supports the use of
 * the PATCH method. The presence of the Accept-Patch header in
 * response to any method is an implicit indication that PATCH
 * is allowed on the resource identified by the Request-URI.
 *
 * @see [Documentation → RFC 5789 §3.1](https://datatracker.ietf.org/doc/html/rfc5789#section-3.1)
 * @see [Specification → RFC 5789](https://webconcepts.info/specs/IETF/RFC/5789)
 */
export type HttpHeaderAcceptPatch = 'Accept-Patch';

/**
 * The Accept-Post HTTP header SHOULD appear in the OPTIONS
 * response for any resource that supports the use of the POST
 * method. The presence of the Accept-Post header in response
 * to any method is an implicit indication that POST is allowed
 * on the resource identified by the Request-URI. The presence
 * of a specific document format in this header indicates that
 * that specific format is allowed on POST requests to the
 * resource identified by the Request-URI.
 *
 * @see [Documentation → Linked Data Platform 1.0](https://www.w3.org/TR/ldp/#header-accept-post)
 * @see [Specification → Linked Data Platform 1.0](https://webconcepts.info/specs/W3C/TR/ldp)
 */
export type HttpHeaderAcceptPost = 'Accept-Post';

/**
 * In order to allow a user agent to inform a server about its
 * preferences regarding profiles for resource representations,
 * the "Accept-Profile" HTTP header used. A user agent can
 * specify several profiles and use quality indicators
 * (q-values) to indicate preferences.
 *
 * @see [Documentation → Internet Draft svensson-profiled-representations §4](https://datatracker.ietf.org/doc/html/draft-svensson-profiled-representations#section-4)
 * @see [Specification → Internet Draft svensson-profiled-representations](https://webconcepts.info/specs/IETF/I-D/svensson-profiled-representations)
 */
export type HttpHeaderAcceptProfile = 'Accept-Profile';

/**
 * A client can express the desired push policy for a request
 * by sending an "Accept-Push-Policy" header field in the
 * request. The header field value contains the push policy
 * that the client expects the server to use when processing
 * the request.
 *
 * @see [Documentation → Internet Draft ruellan-http-accept-push-policy §3.1](https://datatracker.ietf.org/doc/html/draft-ruellan-http-accept-push-policy#section-3.1)
 * @see [Specification → Internet Draft ruellan-http-accept-push-policy](https://webconcepts.info/specs/IETF/I-D/ruellan-http-accept-push-policy)
 */
export type HttpHeaderAcceptPushPolicy = 'Accept-Push-Policy';

/**
 * The "Accept-Query" response header field MAY be used by a
 * server to directly signal support for the QUERY method while
 * identifying the specific query format media type(s) that may
 * be used.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-safe-method-w-body §3](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-safe-method-w-body#section-3)
 * @see [Specification → Internet Draft ietf-httpbis-safe-method-w-body](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-safe-method-w-body)
 */
export type HttpHeaderAcceptQuery = 'Accept-Query';

/**
 * The "Accept-Ranges" header field allows a server to indicate
 * that it supports range requests for the target resource.
 *
 * @see [Documentation → RFC 7233 §2.3](https://datatracker.ietf.org/doc/html/rfc7233#section-2.3)
 * @see [Specification → RFC 7233](https://webconcepts.info/specs/IETF/RFC/7233)
 */
export type HttpHeaderAcceptRanges = 'Accept-Ranges';

/**
 * The "Accept-Signature" field is a Dictionary structured
 * field containing the metadata for one or more requested
 * message signatures to be generated from message components
 * of the target HTTP message. Each member describes a single
 * message signature.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-message-signatures §5.1](https://httpwg.org/http-extensions/draft-ietf-httpbis-message-signatures.html#section-5.1)
 * @see [Specification → Internet Draft ietf-httpbis-message-signatures](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-message-signatures)
 */
export type HttpHeaderAcceptSignature = 'Accept-Signature';

/**
 * The Access-Control-Allow-Credentials header indicates
 * whether the response to request can be exposed when the omit
 * credentials flag is unset. When part of the response to a
 * preflight request it indicates that the actual request can
 * include user credentials.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-allow-credentials)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlAllowCredentials = 'Access-Control-Allow-Credentials';

/**
 * The Access-Control-Allow-Headers header indicates, as part
 * of the response to a preflight request, which header field
 * names can be used during the actual request.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-allow-headers)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlAllowHeaders = 'Access-Control-Allow-Headers';

/**
 * The Access-Control-Allow-Methods header indicates, as part
 * of the response to a preflight request, which methods can be
 * used during the actual request.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-allow-methods)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlAllowMethods = 'Access-Control-Allow-Methods';

/**
 * The Access-Control-Allow-Origin header indicates whether a
 * resource can be shared based by returning the value of the
 * Origin request header, "*", or "null" in the response.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-allow-origin)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlAllowOrigin = 'Access-Control-Allow-Origin';

/**
 * The Access-Control-Expose-Headers header indicates which
 * headers are safe to expose to the API of a CORS API
 * specification.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-expose-headers)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlExposeHeaders = 'Access-Control-Expose-Headers';

/**
 * The Access-Control-Max-Age header indicates how long the
 * results of a preflight request can be cached in a preflight
 * result cache.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-max-age)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlMaxAge = 'Access-Control-Max-Age';

/**
 * The Access-Control-Request-Headers header indicates which
 * headers will be used in the actual request as part of the
 * preflight request.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-request-headers)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlRequestHeaders = 'Access-Control-Request-Headers';

/**
 * The Access-Control-Request-Method header indicates which
 * method will be used in the actual request as part of the
 * preflight request.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-access-control-request-method)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderAccessControlRequestMethod = 'Access-Control-Request-Method';

/**
 * The "Age" header field conveys the sender's estimate of the
 * amount of time since the response was generated or
 * successfully validated at the origin server.
 *
 * @see [Documentation → RFC 7234 §5.1](https://datatracker.ietf.org/doc/html/rfc7234#section-5.1)
 * @see [Specification → RFC 7234](https://webconcepts.info/specs/IETF/RFC/7234)
 */
export type HttpHeaderAge = 'Age';

/**
 * The "Allow" header field lists the set of methods advertised
 * as supported by the target resource. The purpose of this
 * field is strictly to inform the recipient of valid request
 * methods associated with the resource.
 *
 * @see [Documentation → RFC 7231 §7.4.1](https://datatracker.ietf.org/doc/html/rfc7231#section-7.4.1)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderAllow = 'Allow';

/**
 * An HTTP(S) origin server can advertise the availability of
 * alternative services to clients by adding an Alt-Svc header
 * field to responses.
 *
 * @see [Documentation → RFC 7838 §3](https://datatracker.ietf.org/doc/html/rfc7838#section-3)
 * @see [Specification → RFC 7838](https://webconcepts.info/specs/IETF/RFC/7838)
 */
export type HttpHeaderAltSvc = 'Alt-Svc';

/**
 * The Alt-Used header field is used in requests to indicate
 * the identity of the alternative service in use, just as the
 * Host header field identifies the host and port of the
 * origin. Alt-Used is intended to allow alternative services
 * to detect loops, differentiate traffic for purposes of load
 * balancing, and generally to ensure that it is possible to
 * identify the intended destination of traffic, since
 * introducing this information after a protocol is in use has
 * proven to be problematic.
 *
 * @see [Documentation → RFC 7838 §5](https://datatracker.ietf.org/doc/html/rfc7838#section-5)
 * @see [Specification → RFC 7838](https://webconcepts.info/specs/IETF/RFC/7838)
 */
export type HttpHeaderAltUsed = 'Alt-Used';

/**
 * The Alternates response header is used to convey the list of
 * variants bound to a negotiable resource. This list can also
 * include directives for any content negotiation process. If a
 * response from a transparently negotiable resource includes
 * an Alternates header, this header MUST contain the complete
 * variant list bound to the negotiable resource. Responses
 * from resources which do not support transparent content
 * negotiation MAY also use Alternates headers.
 *
 * @see [Documentation → RFC 2295 §8.3](https://datatracker.ietf.org/doc/html/rfc2295#section-8.3)
 * @see [Specification → RFC 2295](https://webconcepts.info/specs/IETF/RFC/2295)
 */
export type HttpHeaderAlternates = 'Alternates';

/**
 * The optional Apply-To-Redirect-Ref header can be used on any
 * request to a redirect reference resource. When it is present
 * and set to "T", the request MUST be applied to the reference
 * resource itself, and a 3xx response MUST NOT be returned.
 *
 * @see [Documentation → RFC 4437 §12.2](https://datatracker.ietf.org/doc/html/rfc4437#section-12.2)
 * @see [Specification → RFC 4437](https://webconcepts.info/specs/IETF/RFC/4437)
 */
export type HttpHeaderApplyToRedirectRef = 'Apply-To-Redirect-Ref';

/**
 * The Authentication-Control header provides more precise
 * control of the client behavior for Web applications using an
 * HTTP authentication protocol.
 *
 * @see [Documentation → RFC 8053 §4](https://datatracker.ietf.org/doc/html/rfc8053#section-4)
 * @see [Specification → RFC 8053](https://webconcepts.info/specs/IETF/RFC/8053)
 */
export type HttpHeaderAuthenticationControl = 'Authentication-Control';

/**
 * HTTP authentication schemes can use the Authentication-Info
 * response header field to communicate information after the
 * client's authentication credentials have been accepted. This
 * information can include a finalization message from the
 * server (e.g., it can contain the server authentication).
 *
 * @see [Documentation → RFC 7615 §3](https://datatracker.ietf.org/doc/html/rfc7615#section-3)
 * @see [Specification → RFC 7615](https://webconcepts.info/specs/IETF/RFC/7615)
 */
export type HttpHeaderAuthenticationInfo = 'Authentication-Info';

/**
 * The client is expected to retry the request, passing an
 * Authorization header field line with Digest scheme, which is
 * defined according to the framework above. The values of the
 * opaque and algorithm fields must be those supplied in the
 * WWW-Authenticate response header field for the entity being
 * requested.
 *
 * @see [Documentation → RFC 7616 §3.4](https://datatracker.ietf.org/doc/html/rfc7616#section-3.4)
 * @see [Documentation → RFC 5849 §3.5.1](https://datatracker.ietf.org/doc/html/rfc5849#section-3.5.1)
 * @see [Documentation → RFC 7235 §4.1](https://datatracker.ietf.org/doc/html/rfc7235#section-4.1)
 * @see [Specification → RFC 7616](https://webconcepts.info/specs/IETF/RFC/7616)
 * @see [Specification → RFC 5849](https://webconcepts.info/specs/IETF/RFC/5849)
 * @see [Specification → RFC 7235](https://webconcepts.info/specs/IETF/RFC/7235)
 */
export type HttpHeaderAuthorization = 'Authorization';

/**
 * When a HTTP client makes a request for a resource for which
 * it has an appropriate dictionary, it can add a
 * "Available-Dictionary" request header to the request to
 * indicate to the server that it has a dictionary available to
 * use for compression.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-compression-dictionary §2.2](https://httpwg.org/http-extensions/draft-ietf-httpbis-compression-dictionary.html#section-2.2)
 * @see [Specification → Internet Draft ietf-httpbis-compression-dictionary](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-compression-dictionary)
 */
export type HttpHeaderAvailableDictionary = 'Available-Dictionary';

/**
 * The C-Ext response header field is used to indicate that all
 * hop-by-hop mandatory extension declarations in the request
 * were fulfilled.
 *
 * @see [Documentation → RFC 2774 §4.3](https://datatracker.ietf.org/doc/html/rfc2774#section-4.3)
 * @see [Specification → RFC 2774](https://webconcepts.info/specs/IETF/RFC/2774)
 */
export type HttpHeaderCExt = 'C-Ext';

/**
 * A mandatory extension declaration indicates that the
 * ultimate recipient MUST consult and adhere to the rules
 * given by the extension when processing the message or
 * reporting an error. Hop-by-hop extension declarations are
 * meaningful only for a single HTTP connection. In HTTP/1.1,
 * C-Man, C-Opt, and all header fields with matching
 * header-prefix values defined by C-Man and C-Opt MUST be
 * protected by a Connection header field. That is, these
 * header fields are to be included as Connection header field
 * directives.
 *
 * @see [Documentation → RFC 2774 §4.2](https://datatracker.ietf.org/doc/html/rfc2774#section-4.2)
 * @see [Specification → RFC 2774](https://webconcepts.info/specs/IETF/RFC/2774)
 */
export type HttpHeaderCMan = 'C-Man';

/**
 * An optional extension declaration indicates that the
 * ultimate recipient of the extension MAY consult and adhere
 * to the rules given by the extension when processing the
 * message, or ignore the extension declaration completely. An
 * agent may not be able to distinguish whether the ultimate
 * recipient does not understand an extension referred to by an
 * optional extension or simply ignores the extension
 * declaration. Hop-by-hop extension declarations are
 * meaningful only for a single HTTP connection. In HTTP/1.1,
 * C-Man, C-Opt, and all header fields with matching
 * header-prefix values defined by C-Man and C-Opt MUST be
 * protected by a Connection header field. That is, these
 * header fields are to be included as Connection header field
 * directives.
 *
 * @see [Documentation → RFC 2774 §4.2](https://datatracker.ietf.org/doc/html/rfc2774#section-4.2)
 * @see [Specification → RFC 2774](https://webconcepts.info/specs/IETF/RFC/2774)
 */
export type HttpHeaderCOpt = 'C-Opt';

/**
 * PEP hop-by-hop extension declarations are meaningful only
 * for a single transport-level connection. The C-PEP header
 * field is a hop-by-hop header field and must not be
 * communicated by proxies over further connections.
 *
 * @see [Documentation → PEP - an Extension Mechanism for HTTP](https://www.w3.org/TR/WD-http-pep-971121.html#_Toc404743948)
 * @see [Specification → PEP - an Extension Mechanism for HTTP](https://webconcepts.info/specs/W3C/TR/WD-http-pep)
 */
export type HttpHeaderCPEP = 'C-PEP';

/**
 * PEP hop-by-hop policies are meaningful only for a single
 * transport-level connection. The C-PEP-Info header field is a
 * hop-by-hop header field and MUST NOT be communicated by
 * proxies over further connections.
 *
 * @see [Documentation → PEP - an Extension Mechanism for HTTP](https://www.w3.org/TR/WD-http-pep-971121.html#_Toc404743954)
 * @see [Specification → PEP - an Extension Mechanism for HTTP](https://webconcepts.info/specs/W3C/TR/WD-http-pep)
 */
export type HttpHeaderCPEPInfo = 'C-PEP-Info';

/**
 * The CDN-Cache-Control response header field is a targeted
 * field that allows origin servers to control the behavior of
 * CDN caches interposed between them and clients separately
 * from other caches that might handle the response. It applies
 * to caches that are part of a distributed network that
 * operate on behalf of an origin server (commonly called a
 * CDN).
 *
 * @see [Documentation → RFC 9213 §3](https://datatracker.ietf.org/doc/html/rfc9213#section-3)
 * @see [Specification → RFC 9213](https://webconcepts.info/specs/IETF/RFC/9213)
 */
export type HttpHeaderCDNCacheControl = 'CDN-Cache-Control';

/**
 * The "Cache-Control" header field is used to specify
 * directives for caches along the request/response chain. Such
 * cache directives are unidirectional in that the presence of
 * a directive in a request does not imply that the same
 * directive is to be given in the response.
 *
 * @see [Documentation → RFC 7234 §5.2](https://datatracker.ietf.org/doc/html/rfc7234#section-5.2)
 * @see [Specification → RFC 7234](https://webconcepts.info/specs/IETF/RFC/7234)
 */
export type HttpHeaderCacheControl = 'Cache-Control';

/**
 * The "Cache-Groups" response header provides a way of
 * describing the relationships between a set of stored
 * responses in HTTP caches by associating them with one or
 * more opaque strings.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-cache-groups §2](https://httpwg.org/http-extensions/draft-ietf-httpbis-cache-groups.html#section-2)
 * @see [Specification → Internet Draft ietf-httpbis-cache-groups](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-cache-groups)
 */
export type HttpHeaderCacheGroups = 'Cache-Groups';

/**
 * The "Cache-Group-Invalidation" response header that allows a
 * state-changing response to trigger a group invalidation.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-cache-groups §3](https://httpwg.org/http-extensions/draft-ietf-httpbis-cache-groups.html#section-3)
 * @see [Specification → Internet Draft ietf-httpbis-cache-groups](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-cache-groups)
 */
export type HttpHeaderCacheGroupInvalidation = 'Cache-Group-Invalidation';

/**
 * For precisely identifying transferred content independent of
 * the used URL and independent of additional header fields in
 * the context of content negotiation, the Cache-NT header
 * field is used. The new header field carries an SHA-256
 * value.
 *
 * @see [Documentation → Internet Draft drechsler-httpbis-improved-caching §2.1](https://datatracker.ietf.org/doc/html/draft-drechsler-httpbis-improved-caching#section-2.1)
 * @see [Specification → Internet Draft drechsler-httpbis-improved-caching](https://webconcepts.info/specs/IETF/I-D/drechsler-httpbis-improved-caching)
 */
export type HttpHeaderCacheNT = 'Cache-NT';

/**
 * The Cache-Status HTTP response header field indicates how
 * caches have handled that response and its corresponding
 * request.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-cache-header §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cache-header#section-2)
 * @see [Specification → Internet Draft ietf-httpbis-cache-header](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-cache-header)
 */
export type HttpHeaderCacheStatus = 'Cache-Status';

/**
 * The Cal-Managed-ID response header field provides the value
 * of the MANAGED-ID parameter corresponding to a newly added
 * ATTACH property. It MUST be sent only in response to a
 * successful POST request with an action set to attachment-add
 * or attachment-update.
 *
 * @see [Documentation → Internet Draft ietf-calext-caldav-attachments §5.1](https://datatracker.ietf.org/doc/html/draft-ietf-calext-caldav-attachments#section-5.1)
 * @see [Specification → Internet Draft ietf-calext-caldav-attachments](https://webconcepts.info/specs/IETF/I-D/ietf-calext-caldav-attachments)
 */
export type HttpHeaderCalManagedID = 'Cal-Managed-ID';

/**
 * The Clear-Site-Data HTTP response header field sends a
 * signal to the user agent that it ought to remove all data of
 * a certain set of types.
 *
 * @see [Documentation → Clear Site Data](https://www.w3.org/TR/clear-site-data/#header)
 * @see [Specification → Clear Site Data](https://webconcepts.info/specs/W3C/TR/clear-site-data)
 */
export type HttpHeaderClearSiteData = 'Clear-Site-Data';

/**
 * In the context of a TLS terminating reverse proxy
 * deployment, the proxy makes the TLS client certificate
 * available to the backend application with the Client-Cert
 * HTTP header field. This field contains the end-entity
 * certificate used by the client in the TLS handshake.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-client-cert-field §2.2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-client-cert-field#section-2.2)
 * @see [Specification → Internet Draft ietf-httpbis-client-cert-field](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-client-cert-field)
 */
export type HttpHeaderClientCert = 'Client-Cert';

/**
 * In the context of a TLS terminating reverse proxy
 * deployment, the proxy MAY make the certificate chain used
 * for validation of the end-entity certificate available to
 * the backend application with the Client-Cert-Chain HTTP
 * header field. This field contains certificates used by the
 * proxy to validate the certificate used by the client in the
 * TLS handshake. These certificates might or might not have
 * been provided by the client during the TLS handshake.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-client-cert-field §2.3](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-client-cert-field#section-2.3)
 * @see [Specification → Internet Draft ietf-httpbis-client-cert-field](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-client-cert-field)
 */
export type HttpHeaderClientCertChain = 'Client-Cert-Chain';

/**
 * The header field-name "Close" has been registered as
 * "reserved", since using that name as an HTTP header field
 * might conflict with the "close" connection option of the
 * Connection header field.
 *
 * @see [Documentation → RFC 7230 §8.1](https://datatracker.ietf.org/doc/html/rfc7230#section-8.1)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderClose = 'Close';

/**
 * The "Connection" header field allows the sender to indicate
 * desired control options for the current connection. In order
 * to avoid confusing downstream recipients, a proxy or gateway
 * MUST remove or replace any received connection options
 * before forwarding the message.
 *
 * @see [Documentation → RFC 7230 §6.1](https://datatracker.ietf.org/doc/html/rfc7230#section-6.1)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderConnection = 'Connection';

/**
 * The Content-Base entity-header field may be used to specify
 * the base URI for resolving relative URLs within the entity.
 * This header field is described as Base in RFC 1808, which is
 * expected to be revised.
 *
 * @see [Documentation → RFC 2068 §14.11](https://datatracker.ietf.org/doc/html/rfc2068#section-14.11)
 * @see [Specification → RFC 2068](https://webconcepts.info/specs/IETF/RFC/2068)
 */
export type HttpHeaderContentBase = 'Content-Base';

/**
 *
 *
 * @see [Documentation → Internet Draft ietf-httpbis-compression-dictionary §2.4](https://httpwg.org/http-extensions/draft-ietf-httpbis-compression-dictionary.html#section-2.4)
 * @see [Specification → Internet Draft ietf-httpbis-compression-dictionary](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-compression-dictionary)
 */
export type HttpHeaderContentDictionary = 'Content-Dictionary';

/**
 * The Content-Digest HTTP field can be used in requests and
 * responses to communicate digests that are calculated using a
 * hashing algorithm applied to the actual message content.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-digest-headers §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-digest-headers#section-2)
 * @see [Specification → Internet Draft ietf-httpbis-digest-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-digest-headers)
 */
export type HttpHeaderContentDigest = 'Content-Digest';

/**
 * The Content-Disposition response header field is used to
 * convey additional information about how to process the
 * response payload, and also can be used to attach additional
 * metadata, such as the filename to use when saving the
 * response payload locally.
 *
 * @see [Documentation → RFC 6266 §4](https://datatracker.ietf.org/doc/html/rfc6266#section-4)
 * @see [Specification → RFC 6266](https://webconcepts.info/specs/IETF/RFC/6266)
 */
export type HttpHeaderContentDisposition = 'Content-Disposition';

/**
 * The "Content-Encoding" header field indicates what content
 * codings have been applied to the representation, beyond
 * those inherent in the media type, and thus what decoding
 * mechanisms have to be applied in order to obtain data in the
 * media type referenced by the Content-Type header field.
 * Content-Encoding is primarily used to allow a
 * representation's data to be compressed without losing the
 * identity of its underlying media type.
 *
 * @see [Documentation → RFC 7231 §3.1.2.2](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.2.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderContentEncoding = 'Content-Encoding';

/**
 * The "Content-Language" header field describes the natural
 * language(s) of the intended audience for the representation.
 * Note that this might not be equivalent to all the languages
 * used within the representation.
 *
 * @see [Documentation → RFC 7231 §3.1.3.2](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.3.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderContentLanguage = 'Content-Language';

/**
 * When a message does not have a Transfer-Encoding header
 * field, a Content-Length header field can provide the
 * anticipated size, as a decimal number of octets, for a
 * potential payload body. For messages that do include a
 * payload body, the Content-Length field-value provides the
 * framing information necessary for determining where the body
 * (and message) ends. For messages that do not include a
 * payload body, the Content-Length indicates the size of the
 * selected representation (Section 3 of [Part2]).
 *
 * @see [Documentation → RFC 7230 §3.3.2](https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderContentLength = 'Content-Length';

/**
 * The "Content-Location" header field references a URI that
 * can be used as an identifier for a specific resource
 * corresponding to the representation in this message's
 * payload. In other words, if one were to perform a GET
 * request on this URI at the time of this message's
 * generation, then a 200 (OK) response would contain the same
 * representation that is enclosed as payload in this message.
 *
 * @see [Documentation → RFC 7231 §3.1.4.2](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.4.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderContentLocation = 'Content-Location';

/**
 * The "Content-MD5" header field references an MD5 hash of the
 * content to verify the integrity of the message body that's
 * been transmitted.
 *
 * @see [Documentation → RFC 1864 §1](https://datatracker.ietf.org/doc/html/rfc1864#section-1)
 * @see [Specification → RFC 1864](https://webconcepts.info/specs/IETF/RFC/1864)
 */
export type HttpHeaderContentMD5 = 'Content-MD5';

/**
 * The Content-Range entity-header is sent with a partial
 * entity-body to specify where in the full entity-body the
 * partial body should be applied.
 *
 * @see [Documentation → Internet Draft combs-http-indeterminate-range §2.2](https://datatracker.ietf.org/doc/html/draft-combs-http-indeterminate-range#section-2.2)
 * @see [Documentation → RFC 7233 §4.2](https://datatracker.ietf.org/doc/html/rfc7233#section-4.2)
 * @see [Specification → Internet Draft combs-http-indeterminate-range](https://webconcepts.info/specs/IETF/I-D/combs-http-indeterminate-range)
 * @see [Specification → RFC 7233](https://webconcepts.info/specs/IETF/RFC/7233)
 */
export type HttpHeaderContentRange = 'Content-Range';

/**
 * The Content-Security-Policy HTTP response header field is
 * the preferred mechanism for delivering a policy from a
 * server to a client.
 *
 * @see [Documentation → Content Security Policy Level 3](https://www.w3.org/TR/CSP3/#csp-header)
 * @see [Documentation → Content Security Policy Level 2](https://www.w3.org/TR/CSP2/#content-security-policy-header-field)
 * @see [Specification → Content Security Policy Level 3](https://webconcepts.info/specs/W3C/TR/CSP3)
 * @see [Specification → Content Security Policy Level 2](https://webconcepts.info/specs/W3C/TR/CSP2)
 */
export type HttpHeaderContentSecurityPolicy = 'Content-Security-Policy';

/**
 * The Content-Security-Policy-Pin header field is the
 * mechanism for delivering a pinned policy that the user agent
 * MUST enforce for any resource which is not delivered with a
 * Content-Security-Policy header (as described in the "Pin a
 * policy to response" algorithm).
 *
 * @see [Documentation → Content Security Policy Pinning](https://www.w3.org/TR/csp-pinning/#content-security-policy-pin-header-field)
 * @see [Specification → Content Security Policy Pinning](https://webconcepts.info/specs/W3C/TR/csp-pinning)
 */
export type HttpHeaderContentSecurityPolicyPin = 'Content-Security-Policy-Pin';

/**
 * The Content-Security-Policy-Report-Only HTTP response header
 * field allows web developers to experiment with policies by
 * monitoring (but not enforcing) their effects.
 *
 * @see [Documentation → Content Security Policy Level 3](https://www.w3.org/TR/CSP3/#cspro-header)
 * @see [Documentation → Content Security Policy Level 2](https://www.w3.org/TR/CSP2/#content-security-policy-report-only-header-field)
 * @see [Specification → Content Security Policy Level 3](https://webconcepts.info/specs/W3C/TR/CSP3)
 * @see [Specification → Content Security Policy Level 2](https://webconcepts.info/specs/W3C/TR/CSP2)
 */
export type HttpHeaderContentSecurityPolicyReportOnly = 'Content-Security-Policy-Report-Only';

/**
 * The Content-Security-Policy-Report-Only-Pin header field is
 * the mechanism for delivering a pinned policy that the user
 * agent MUST monitor for any resource which is not delivered
 * with a Content-Security-Policy-Report-Only header (as
 * described in the "Pin a policy to response" algorithm).
 *
 * @see [Documentation → Content Security Policy Pinning](https://www.w3.org/TR/csp-pinning/#content-security-policy-report-only-pin-header-field)
 * @see [Specification → Content Security Policy Pinning](https://webconcepts.info/specs/W3C/TR/csp-pinning)
 */
export type HttpHeaderContentSecurityPolicyReportOnlyPin = 'Content-Security-Policy-Report-Only-Pin';

/**
 * The Content-Signature header field carries a signature of
 * the payload body of an HTTP message. This allows for content
 * to be protected from modification.
 *
 * @see [Documentation → Internet Draft thomson-http-content-signature §2](https://datatracker.ietf.org/doc/html/draft-thomson-http-content-signature#section-2)
 * @see [Specification → Internet Draft thomson-http-content-signature](https://webconcepts.info/specs/IETF/I-D/thomson-http-content-signature)
 */
export type HttpHeaderContentSignature = 'Content-Signature';

/**
 * The Content-Translation-Type field can be used in the
 * individual language message parts to identify the type of
 * translation. Based on the value of this field and the user's
 * preferences, a conforming email client can determine which
 * message part to display.
 *
 * @see [Documentation → RFC 8255 §6](https://datatracker.ietf.org/doc/html/rfc8255#section-6)
 * @see [Specification → RFC 8255](https://webconcepts.info/specs/IETF/RFC/8255)
 */
export type HttpHeaderContentTranslationType = 'Content-Translation-Type';

/**
 * The "Content-Type" header field indicates the media type of
 * the associated representation: either the representation
 * enclosed in the message payload or the selected
 * representation, as determined by the message semantics. The
 * indicated media type defines both the data format and how
 * that data is intended to be processed by a recipient, within
 * the scope of the received message semantics, after any
 * content codings indicated by Content-Encoding are decoded.
 *
 * @see [Documentation → RFC 7231 §3.1.1.5](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.1.5)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderContentType = 'Content-Type';

/**
 * The Content-Version entity-header field defines the version
 * tag associated with a rendition of an evolving entity.
 * Together with the Derived-From field, it allows a group of
 * people to work simultaneously on the creation of a work as
 * an iterative process. The field should be used to allow
 * evolution of a particular work along a single path rather
 * than derived works or renditions in different
 * representations.
 *
 * @see [Documentation → RFC 2068 §19.6.2.2](https://datatracker.ietf.org/doc/html/rfc2068#section-19.6.2.2)
 * @see [Specification → RFC 2068](https://webconcepts.info/specs/IETF/RFC/2068)
 */
export type HttpHeaderContentVersion = 'Content-Version';

/**
 * The Content-Warning header allows to return different kinds
 * of warning information via HTTP.
 *
 * @see [Documentation → Internet Draft cedik-http-warning §8.1](https://datatracker.ietf.org/doc/html/draft-cedik-http-warning#section-8.1)
 * @see [Specification → Internet Draft cedik-http-warning](https://webconcepts.info/specs/IETF/I-D/cedik-http-warning)
 */
export type HttpHeaderContentWarning = 'Content-Warning';

/**
 * The user agent sends stored cookies to the origin server in
 * the Cookie header.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-rfc6265bis §4.2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-4.2)
 * @see [Documentation → RFC 6265 §4.2](https://datatracker.ietf.org/doc/html/rfc6265#section-4.2)
 * @see [Specification → Internet Draft ietf-httpbis-rfc6265bis](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-rfc6265bis)
 * @see [Specification → RFC 6265](https://webconcepts.info/specs/IETF/RFC/6265)
 */
export type HttpHeaderCookie = 'Cookie';

/**
 * The Cookie2 request header facilitates interoperation
 * between clients and servers that understand different
 * versions of the cookie specification.
 *
 * @see [Documentation → RFC 2965 §3.3](https://datatracker.ietf.org/doc/html/rfc2965#section-3.3)
 * @see [Specification → RFC 2965](https://webconcepts.info/specs/IETF/RFC/2965)
 */
export type HttpHeaderCookie2 = 'Cookie2';

/**
 * The Cross-Origin-Embedder-Policy header allows controlling
 * how cross-origin resources should load, based on a specific
 * policy/set of permissions.
 *
 * @see [Documentation → WHATWG HTML Standard](https://html.spec.whatwg.org/#cross-origin-embedder-policy)
 * @see [Specification → WHATWG HTML Standard](https://html.spec.whatwg.org/)
 */
export type HttpHeaderCrossOriginEmbedderPolicy = 'Cross-Origin-Embedder-Policy';

/**
 * A cross-origin opener policy value allows a document which
 * is navigated to in a top-level browsing context to force the
 * creation of a new top-level browsing context, and a
 * corresponding group.
 *
 * @see [Documentation → WHATWG HTML Standard](https://html.spec.whatwg.org/#cross-origin-opener-policy)
 * @see [Specification → WHATWG HTML Standard](https://html.spec.whatwg.org/)
 */
export type HttpHeaderCrossOriginOpenerPolicy = 'Cross-Origin-Opener-Policy';

/**
 * The `Cross-Origin-Resource-Policy` response header can be
 * used to require checking a request’s current URL’s origin
 * against a request’s origin when request’s mode is "no-cors".
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-cross-origin-resource-policy)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderCrossOriginResourcePolicy = 'Cross-Origin-Resource-Policy';

/**
 * The DASL response header indicates server support for query
 * grammars in the OPTIONS method. The value is a list of URIs
 * that indicate the types of supported grammars. Note that
 * although the URIs can be used to identify each supported
 * search grammar, there is not necessarily a direct
 * relationship between the URI and the XML element name that
 * can be used in XML based SEARCH requests (the element name
 * itself is identified by its namespace name (a URI reference)
 * and the element's local name).
 *
 * @see [Documentation → RFC 5323 §9.1.1](https://datatracker.ietf.org/doc/html/rfc5323#section-9.1.1)
 * @see [Specification → RFC 5323](https://webconcepts.info/specs/IETF/RFC/5323)
 */
export type HttpHeaderDASL = 'DASL';

/**
 * This general-header appearing in the response indicates that
 * the resource supports the DAV schema and protocol as
 * specified. As a request header, this header allows the
 * client to advertise compliance with named features when the
 * server needs that information.
 *
 * @see [Documentation → RFC 4918 §10.1](https://datatracker.ietf.org/doc/html/rfc4918#section-10.1)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderDAV = 'DAV';

/**
 * The DNT header field is defined as the means for expressing
 * a user's tracking preference via HTTP.
 *
 * @see [Documentation → Tracking Preference Expression (DNT)](https://www.w3.org/TR/tracking-dnt/#dnt-header-field)
 * @see [Specification → Tracking Preference Expression (DNT)](https://webconcepts.info/specs/W3C/TR/tracking-dnt)
 */
export type HttpHeaderDNT = 'DNT';

/**
 * The "Date" header field represents the date and time at
 * which the message was originated, having the same semantics
 * as the Origination Date Field (orig-date) defined in Section
 * 3.6.1 of RFC 5322.
 *
 * @see [Documentation → RFC 7231 §7.1.1.2](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderDate = 'Date';

/**
 * The Delta-Base entity-header field is used in a
 * delta-encoded response to specify the entity tag of the base
 * instance. A Delta-Base header field MUST be included in a
 * response with an IM header that includes a delta-coding, if
 * the request included more than one entity tag in its
 * If-None-Match header field. Any response with an IM header
 * that includes a delta-coding MAY include a Delta-Base
 * header.
 *
 * @see [Documentation → RFC 3229 §10.5.1](https://datatracker.ietf.org/doc/html/rfc3229#section-10.5.1)
 * @see [Specification → RFC 3229](https://webconcepts.info/specs/IETF/RFC/3229)
 */
export type HttpHeaderDeltaBase = 'Delta-Base';

/**
 * The "Deprecation" HTTP response header field allows a server
 * to communicate to a client that the URI-identified resource
 * in context of the message is deprecated. It can also provide
 * information that the resource is deprecated since which
 * version.
 *
 * @see [Documentation → Internet Draft ietf-httpapi-deprecation-header §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-deprecation-header#section-2)
 * @see [Specification → Internet Draft ietf-httpapi-deprecation-header](https://webconcepts.info/specs/IETF/I-D/ietf-httpapi-deprecation-header)
 */
export type HttpHeaderDeprecation = 'Deprecation';

/**
 * The Depth request header is used with methods executed on
 * resources that could potentially have internal members to
 * indicate whether the method is to be applied only to the
 * resource ("Depth: 0"), to the resource and its internal
 * members only ("Depth: 1"), or the resource and all its
 * members ("Depth: infinity").
 *
 * @see [Documentation → RFC 4918 §10.2](https://datatracker.ietf.org/doc/html/rfc4918#section-10.2)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderDepth = 'Depth';

/**
 * The Destination request header specifies the URI that
 * identifies a destination resource for methods such as COPY
 * and MOVE, which take two URIs as parameters.
 *
 * @see [Documentation → RFC 4918 §10.3](https://datatracker.ietf.org/doc/html/rfc4918#section-10.3)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderDestination = 'Destination';

/**
 * The Device Memory header field is a number that indicates
 * the client's device memory i.e. approximate amount of ram in
 * GiB.
 *
 * @see [Documentation → Device Memory](https://www.w3.org/TR/device-memory-1/#sec-device-memory-client-hint-header)
 * @see [Specification → Device Memory](https://webconcepts.info/specs/W3C/TR/device-memory-1)
 */
export type HttpHeaderDeviceMemory = 'Device-Memory';

/**
 * When a HTTP client makes a request for a resource for which
 * it has an appropriate dictionary and the dictionary was
 * stored with a server-provided "id" in the Use-As-Dictionary
 * response then the client MUST echo the stored "id" in a
 * "Dictionary-ID" request header.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-compression-dictionary §2.3](https://httpwg.org/http-extensions/draft-ietf-httpbis-compression-dictionary.html#section-2.3)
 * @see [Specification → Internet Draft ietf-httpbis-compression-dictionary](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-compression-dictionary)
 */
export type HttpHeaderDictionaryID = 'Dictionary-ID';

/**
 * The Digest message header field provides a message digest of
 * the instance described by the message.
 *
 * @see [Documentation → RFC 3230 §4.3.2](https://datatracker.ietf.org/doc/html/rfc3230#section-4.3.2)
 * @see [Specification → RFC 3230](https://webconcepts.info/specs/IETF/RFC/3230)
 */
export type HttpHeaderDigest = 'Digest';

/**
 * The Downlink request header field is a number that indicates
 * the downlink value at the time when the request is made by
 * the user agent.
 *
 * @see [Documentation → WICG Network Information API](https://wicg.github.io/netinfo/#downlink-request-header-field)
 * @see [Specification → WICG Network Information API](https://wicg.github.io/netinfo/)
 */
export type HttpHeaderDownlink = 'Downlink';

/**
 * The EDIINT-Features header field indicates the originating
 * user agent is capable of supporting the features listed.
 *
 * @see [Documentation → RFC 6017 §3](https://datatracker.ietf.org/doc/html/rfc6017#section-3)
 * @see [Specification → RFC 6017](https://webconcepts.info/specs/IETF/RFC/6017)
 */
export type HttpHeaderEDIINTFeatures = 'EDIINT-Features';

/**
 * Servers may request the protections outlined by Entry Point
 * Regulation (EPR) by sending an EPR HTTP response header
 * field along with a response.
 *
 * @see [Documentation → Entry Point Regulation](https://www.w3.org/TR/epr/#epr-header)
 * @see [Specification → Entry Point Regulation](https://webconcepts.info/specs/W3C/TR/epr)
 */
export type HttpHeaderEPR = 'EPR';

/**
 * The "ETag" header field in a response provides the current
 * entity-tag for the selected representation, as determined at
 * the conclusion of handling the request. An entity-tag is an
 * opaque validator for differentiating between multiple
 * representations of the same resource, regardless of whether
 * those multiple representations are due to resource state
 * changes over time, content negotiation resulting in multiple
 * representations being valid at the same time, or both.
 *
 * @see [Documentation → RFC 7232 §2.3](https://datatracker.ietf.org/doc/html/rfc7232#section-2.3)
 * @see [Specification → RFC 7232](https://webconcepts.info/specs/IETF/RFC/7232)
 */
export type HttpHeaderETag = 'ETag';

/**
 * The Early-Data request header field indicates that the
 * request has been conveyed in early data and that a client
 * understands the 425 (Too Early) status code.
 *
 * @see [Documentation → RFC 8470 §5.1](https://datatracker.ietf.org/doc/html/rfc8470#section-5.1)
 * @see [Specification → RFC 8470](https://webconcepts.info/specs/IETF/RFC/8470)
 */
export type HttpHeaderEarlyData = 'Early-Data';

/**
 * The ECT request header field is a number that indicates the
 * effective connection type at the time when the request is
 * made by the user agent.
 *
 * @see [Documentation → WICG Network Information API](https://wicg.github.io/netinfo/#ect-request-header-field)
 * @see [Specification → WICG Network Information API](https://wicg.github.io/netinfo/)
 */
export type HttpHeaderECT = 'ECT';

/**
 * The "Expect" header field in a request indicates a certain
 * set of behaviors (expectations) that need to be supported by
 * the server in order to properly handle this request.
 *
 * @see [Documentation → RFC 7231 §5.1.1](https://datatracker.ietf.org/doc/html/rfc7231#section-5.1.1)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderExpect = 'Expect';

/**
 * The Expect-CT response header field is a new field defined
 * in this specification. It is used by a server to indicate
 * that UAs should evaluate connections to the host emitting
 * the header field for CT compliance.
 *
 * @see [Documentation → RFC 9163](https://datatracker.ietf.org/doc/html/rfc9163)
 * @see [Specification → RFC 9163](https://webconcepts.info/specs/IETF/RFC/9163)
 */
export type HttpHeaderExpectCT = 'Expect-CT';

/**
 * The "Expires" header field gives the date/time after which
 * the response is considered stale. The presence of an Expires
 * field does not imply that the original resource will change
 * or cease to exist at, before, or after that time.
 *
 * @see [Documentation → RFC 7234 §5.3](https://datatracker.ietf.org/doc/html/rfc7234#section-5.3)
 * @see [Specification → RFC 7234](https://webconcepts.info/specs/IETF/RFC/7234)
 */
export type HttpHeaderExpires = 'Expires';

/**
 * The Ext header field is used to indicate that all end-to-end
 * mandatory extension declarations in the request were
 * fulfilled.
 *
 * @see [Documentation → RFC 2774 §4.3](https://datatracker.ietf.org/doc/html/rfc2774#section-4.3)
 * @see [Specification → RFC 2774](https://webconcepts.info/specs/IETF/RFC/2774)
 */
export type HttpHeaderExt = 'Ext';

/**
 * The Feature-Policy HTTP header field can be used in the
 * response (server to client) to communicate the feature
 * policy that should be enforced by the client.
 *
 * @see [Documentation → Permissions Policy](https://www.w3.org/TR/feature-policy-1/#feature-policy-http-header-field)
 * @see [Specification → Permissions Policy](https://webconcepts.info/specs/W3C/TR/feature-policy-1)
 */
export type HttpHeaderFeaturePolicy = 'Feature-Policy';

/**
 * The "Forwarded" HTTP header field is an OPTIONAL header
 * field that, when used, contains a list of
 * parameter-identifier pairs that disclose information that is
 * altered or lost when a proxy is involved in the path of the
 * request.
 *
 * @see [Documentation → RFC 7239 §4](https://datatracker.ietf.org/doc/html/rfc7239#section-4)
 * @see [Specification → RFC 7239](https://webconcepts.info/specs/IETF/RFC/7239)
 */
export type HttpHeaderForwarded = 'Forwarded';

/**
 * The "From" header field contains an Internet email address
 * for a human user who controls the requesting user agent.
 *
 * @see [Documentation → RFC 7231 §5.5.1](https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.1)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderFrom = 'From';

/**
 * The GET-Location entity header identifies a substitute
 * resource that can be used in subsequent requests for the
 * same information, but using the GET method.
 *
 * @see [Documentation → Internet Draft reschke-http-get-location §3](https://datatracker.ietf.org/doc/html/draft-reschke-http-get-location#section-3)
 * @see [Specification → Internet Draft reschke-http-get-location](https://webconcepts.info/specs/IETF/I-D/reschke-http-get-location)
 */
export type HttpHeaderGETLocation = 'GET-Location';

/**
 * A request that upgrades from HTTP/1.1 to HTTP/2 MUST include
 * exactly one "HTTP2-Settings" header field. The
 * "HTTP2-Settings" header field is a connection-specific
 * header field that includes parameters that govern the HTTP/2
 * connection, provided in anticipation of the server accepting
 * the request to upgrade.
 *
 * @see [Documentation → RFC 7540 §3.2.1](https://datatracker.ietf.org/doc/html/rfc7540#section-3.2.1)
 * @see [Specification → RFC 7540](https://webconcepts.info/specs/IETF/RFC/7540)
 */
export type HttpHeaderHTTP2Settings = 'HTTP2-Settings';

/**
 * The server MUST add a header field to the response message
 * when the registration has succeeded in order to indicate the
 * new state. The header to be used is "Hobareg", and the value
 * when registration has succeeded is to be "regok". When
 * registration is in an intermediate state (e.g., on an HTTP
 * response for an interstitial page), the server MAY add this
 * header with a value of "reginwork".
 *
 * @see [Documentation → RFC 7486 §6.1.1](https://datatracker.ietf.org/doc/html/rfc7486#section-6.1.1)
 * @see [Specification → RFC 7486](https://webconcepts.info/specs/IETF/RFC/7486)
 */
export type HttpHeaderHobareg = 'Hobareg';

/**
 * The "Host" header field in a request provides the host and
 * port information from the target URI, enabling the origin
 * server to distinguish among resources while servicing
 * requests for multiple host names on a single IP address.
 *
 * @see [Documentation → RFC 7230 §5.4](https://datatracker.ietf.org/doc/html/rfc7230#section-5.4)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderHost = 'Host';

/**
 * The IM response-header field is used to indicate the
 * instance-manipulations, if any, that have been applied to
 * the instance represented by the response. Typical instance
 * manipulations include delta encoding and compression.
 *
 * @see [Documentation → RFC 3229 §10.5.2](https://datatracker.ietf.org/doc/html/rfc3229#section-10.5.2)
 * @see [Specification → RFC 3229](https://webconcepts.info/specs/IETF/RFC/3229)
 */
export type HttpHeaderIM = 'IM';

/**
 * An idempotency key is a unique value generated by the client
 * which the resource server uses to recognize subsequent
 * retries of the same request. The "Idempotency-Key" HTTP
 * request header field carries this key.
 *
 * @see [Documentation → Internet Draft ietf-httpapi-idempotency-key-header §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-idempotency-key-header-00#section-2)
 * @see [Specification → Internet Draft ietf-httpapi-idempotency-key-header](https://webconcepts.info/specs/IETF/I-D/ietf-httpapi-idempotency-key-header)
 */
export type HttpHeaderIdempotencyKey = 'Idempotency-Key';

/**
 * The If request header is intended to have similar
 * functionality to the If-Match header defined in Section
 * 14.24 of RFC 2616. However, the If header handles any state
 * token as well as ETags. A typical example of a state token
 * is a lock token, and lock tokens are the only state tokens
 * defined in this specification.
 *
 * @see [Documentation → RFC 4918 §10.4](https://datatracker.ietf.org/doc/html/rfc4918#section-10.4)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderIf = 'If';

/**
 * The "If-Match" header field makes the request method
 * conditional on the recipient origin server either having at
 * least one current representation of the target resource,
 * when the field-value is "*", or having a current
 * representation of the target resource that has an entity-tag
 * matching a member of the list of entity-tags provided in the
 * field-value.
 *
 * @see [Documentation → RFC 7232 §3.1](https://datatracker.ietf.org/doc/html/rfc7232#section-3.1)
 * @see [Specification → RFC 7232](https://webconcepts.info/specs/IETF/RFC/7232)
 */
export type HttpHeaderIfMatch = 'If-Match';

/**
 * The "If-Modified-Since" header field makes a GET or HEAD
 * request method conditional on the selected representation's
 * modification date being more recent than the date provided
 * in the field-value. Transfer of the selected
 * representation's data is avoided if that data has not
 * changed.
 *
 * @see [Documentation → RFC 7232 §3.3](https://datatracker.ietf.org/doc/html/rfc7232#section-3.3)
 * @see [Specification → RFC 7232](https://webconcepts.info/specs/IETF/RFC/7232)
 */
export type HttpHeaderIfModifiedSince = 'If-Modified-Since';

/**
 * The "If-None-Match" header field makes the request method
 * conditional on a recipient cache or origin server either not
 * having any current representation of the target resource,
 * when the field-value is "*", or having a selected
 * representation with an entity-tag that does not match any of
 * those listed in the field-value.
 *
 * @see [Documentation → RFC 7232 §3.2](https://datatracker.ietf.org/doc/html/rfc7232#section-3.2)
 * @see [Specification → RFC 7232](https://webconcepts.info/specs/IETF/RFC/7232)
 */
export type HttpHeaderIfNoneMatch = 'If-None-Match';

/**
 * If a client has a partial copy of a representation and
 * wishes to have an up-to-date copy of the entire
 * representation, it could use the Range header field with a
 * conditional GET (using either or both of If-Unmodified-Since
 * and If-Match.)  However, if the precondition fails because
 * the representation has been modified, the client would then
 * have to make a second request to obtain the entire current
 * representation. The "If-Range" header field allows a client
 * to "short-circuit" the second request. Informally, its
 * meaning is: if the representation is unchanged, send me the
 * part(s) that I am requesting in Range; otherwise, send me
 * the entire representation.
 *
 * @see [Documentation → RFC 7233 §3.2](https://datatracker.ietf.org/doc/html/rfc7233#section-3.2)
 * @see [Specification → RFC 7233](https://webconcepts.info/specs/IETF/RFC/7233)
 */
export type HttpHeaderIfRange = 'If-Range';

/**
 * The If-Schedule-Tag-Match request header field is used with
 * a method to make it conditional. Clients can set this header
 * to the value returned in the Schedule-Tag response header,
 * or the CALDAV:schedule-tag property, of a scheduling object
 * resource previously retrieved from the server to avoid
 * overwriting "consequential" changes to the scheduling object
 * resource.
 *
 * @see [Documentation → RFC 6638 §8.3](https://datatracker.ietf.org/doc/html/rfc6638#section-8.3)
 * @see [Specification → RFC 6638](https://webconcepts.info/specs/IETF/RFC/6638)
 */
export type HttpHeaderIfScheduleTagMatch = 'If-Schedule-Tag-Match';

/**
 * The "If-Unmodified-Since" header field makes the request
 * method conditional on the selected representation's last
 * modification date being earlier than or equal to the date
 * provided in the field-value. This field accomplishes the
 * same purpose as If-Match for cases where the user agent does
 * not have an entity-tag for the representation.
 *
 * @see [Documentation → RFC 7232 §3.4](https://datatracker.ietf.org/doc/html/rfc7232#section-3.4)
 * @see [Specification → RFC 7232](https://webconcepts.info/specs/IETF/RFC/7232)
 */
export type HttpHeaderIfUnmodifiedSince = 'If-Unmodified-Since';

/**
 * When a Token Consumer redirects the client to a Token
 * Provider as a means to deliver the token request, it SHOULD
 * include an Include-Referred-Token-Binding-ID HTTP response
 * header field in its HTTP response.
 *
 * @see [Documentation → RFC 8473 §5.3](https://datatracker.ietf.org/doc/html/rfc8473#section-5.3)
 * @see [Specification → RFC 8473](https://webconcepts.info/specs/IETF/RFC/8473)
 */
export type HttpHeaderIncludeReferredTokenBindingID = 'Include-Referred-Token-Binding-ID';

/**
 * The "Key" response header field describes the request
 * attributes that the server has used to select the current
 * representation. As such, its semantics are similar to the
 * "Vary" response header field, but it allows more
 * fine-grained description, using "key modifiers".
 *
 * @see [Documentation → Internet Draft ietf-httpbis-key §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-key#section-2)
 * @see [Specification → Internet Draft ietf-httpbis-key](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-key)
 */
export type HttpHeaderKey = 'Key';

/**
 * For certain methods (e.g. GET, PROPFIND), if the request-URL
 * identifies a version-controlled resource, a label can be
 * specified in a Label request header to cause the method to
 * be applied to the version selected by that label from the
 * version history of that version-controlled resource.
 *
 * @see [Documentation → RFC 3253 §8.3](https://datatracker.ietf.org/doc/html/rfc3253#section-8.3)
 * @see [Specification → RFC 3253](https://webconcepts.info/specs/IETF/RFC/3253)
 */
export type HttpHeaderLabel = 'Label';

/**
 * The Last-Event-ID HTTP header specifies the value of the
 * event source's last event ID string, encoded as UTF-8.
 *
 * @see [Documentation → Server-Sent Events](https://www.w3.org/TR/eventsource/#last-event-id)
 * @see [Specification → Server-Sent Events](https://webconcepts.info/specs/W3C/TR/eventsource)
 */
export type HttpHeaderLastEventID = 'Last-Event-ID';

/**
 * The "Last-Modified" header field in a response provides a
 * timestamp indicating the date and time at which the origin
 * server believes the selected representation was last
 * modified, as determined at the conclusion of handling the
 * request.
 *
 * @see [Documentation → RFC 7232 §2.2](https://datatracker.ietf.org/doc/html/rfc7232#section-2.2)
 * @see [Specification → RFC 7232](https://webconcepts.info/specs/IETF/RFC/7232)
 */
export type HttpHeaderLastModified = 'Last-Modified';

/**
 * The Link header field provides a means for serialising one
 * or more links into HTTP headers.
 *
 * @see [Documentation → RFC 8288 §3](https://datatracker.ietf.org/doc/html/rfc8288#section-3)
 * @see [Specification → RFC 8288](https://webconcepts.info/specs/IETF/RFC/8288)
 */
export type HttpHeaderLink = 'Link';

/**
 * The Link-Template header field provides a means for
 * serialising one or more links into HTTP message metadata. It
 * is semantically equivalent to the Link header field defined
 * in Section 3 of "Web Linking", except that it uses URI
 * Templates to convey the structure of links.
 *
 * @see [Documentation → Internet Draft ietf-httpapi-link-template §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-link-template#section-2)
 * @see [Specification → Internet Draft ietf-httpapi-link-template](https://webconcepts.info/specs/IETF/I-D/ietf-httpapi-link-template)
 */
export type HttpHeaderLinkTemplate = 'Link-Template';

/**
 * The "Location" header field is used in some responses to
 * refer to a specific resource in relation to the response.
 * The type of relationship is defined by the combination of
 * request method and status code semantics.
 *
 * @see [Documentation → RFC 7231 §7.1.2](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderLocation = 'Location';

/**
 * The Lock-Token request header is used with the UNLOCK method
 * to identify the lock to be removed.
 *
 * @see [Documentation → RFC 4918 §10.5](https://datatracker.ietf.org/doc/html/rfc4918#section-10.5)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderLockToken = 'Lock-Token';

/**
 * HTTP is not a MIME-compliant protocol. However, messages can
 * include a single MIME-Version header field to indicate what
 * version of the MIME protocol was used to construct the
 * message. Use of the MIME-Version header field indicates that
 * the message is in full conformance with the MIME protocol
 * (as defined in RFC 2045). Senders are responsible for
 * ensuring full conformance (where possible) when exporting
 * HTTP messages to strict MIME environments.
 *
 * @see [Documentation → RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#appendix-A.1)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderMIMEVersion = 'MIME-Version';

/**
 * A mandatory extension declaration indicates that the
 * ultimate recipient MUST consult and adhere to the rules
 * given by the extension when processing the message or
 * reporting an error.
 *
 * @see [Documentation → RFC 2774 §4.1](https://datatracker.ietf.org/doc/html/rfc2774#section-4.1)
 * @see [Specification → RFC 2774](https://webconcepts.info/specs/IETF/RFC/2774)
 */
export type HttpHeaderMan = 'Man';

/**
 * The "Max-Forwards" header field provides a mechanism with
 * the TRACE and OPTIONS request methods to limit the number of
 * times that the request is forwarded by proxies.
 *
 * @see [Documentation → RFC 7231 §5.1.2](https://datatracker.ietf.org/doc/html/rfc7231#section-5.1.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderMaxForwards = 'Max-Forwards';

/**
 * The "Memento-Datetime" response header is used by a server
 * to indicate that a response reflects a prior state of an
 * Original Resource. Its value expresses the datetime of that
 * state.
 *
 * @see [Documentation → RFC 7089 §2.1.1](https://datatracker.ietf.org/doc/html/rfc7089#section-2.1.1)
 * @see [Specification → RFC 7089](https://webconcepts.info/specs/IETF/RFC/7089)
 */
export type HttpHeaderMementoDatetime = 'Memento-Datetime';

/**
 * The NEL response header is used to communicate an origin's
 * NEL policy to the user agent. The header's value is
 * interpreted as an array of JSON objects. Each object in the
 * array defines an NEL policy for the origin.
 *
 * @see [Documentation → Network Error Logging](https://www.w3.org/TR/network-error-logging-1/#nel-response-header)
 * @see [Specification → Network Error Logging](https://webconcepts.info/specs/W3C/TR/network-error-logging-1)
 */
export type HttpHeaderNEL = 'NEL';

/**
 * The Negotiate request header can contain directives for any
 * content negotiation process initiated by the request.
 *
 * @see [Documentation → RFC 2295 §8.4](https://datatracker.ietf.org/doc/html/rfc2295#section-8.4)
 * @see [Specification → RFC 2295](https://webconcepts.info/specs/IETF/RFC/2295)
 */
export type HttpHeaderNegotiate = 'Negotiate';

/**
 * The "Nice" header field indicates that a request is less
 * important than a request that doesn't bear this header.
 *
 * @see [Documentation → Internet Draft thomson-http-nice §2](https://datatracker.ietf.org/doc/html/draft-thomson-http-nice#section-2)
 * @see [Specification → Internet Draft thomson-http-nice](https://webconcepts.info/specs/IETF/I-D/thomson-http-nice)
 */
export type HttpHeaderNice = 'Nice';

/**
 * A response to a create or upsert operation that returns 204
 * No Content MUST include an OData-EntityId response header.
 * The value of the header is the entity-id of the entity that
 * was acted on by the request.
 *
 * @see [Documentation → OASIS Standard odata-v4.0-part1-protocol](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752238)
 * @see [Specification → OASIS Standard odata-v4.0-part1-protocol](https://webconcepts.info/specs/OASIS/standard/odata-v4.0-part1-protocol)
 */
export type HttpHeaderODataEntityId = 'OData-EntityId';

/**
 * The OData-Isolation header specifies the isolation of the
 * current request from external changes. The only supported
 * value for this header is snapshot.
 *
 * @see [Documentation → OASIS Standard odata-v4.0-part1-protocol](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752232)
 * @see [Specification → OASIS Standard odata-v4.0-part1-protocol](https://webconcepts.info/specs/OASIS/standard/odata-v4.0-part1-protocol)
 */
export type HttpHeaderODataIsolation = 'OData-Isolation';

/**
 * Clients SHOULD specify an OData-MaxVersion request header.
 * If specified the service MUST generate a response with an
 * OData-Version less than or equal to the specified
 * OData-MaxVersion.
 *
 * @see [Documentation → OASIS Standard odata-v4.0-part1-protocol](http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_Toc453752233)
 * @see [Specification → OASIS Standard odata-v4.0-part1-protocol](https://webconcepts.info/specs/OASIS/standard/odata-v4.0-part1-protocol)
 */
export type HttpHeaderODataMaxVersion = 'OData-MaxVersion';

/**
 * The HTTP OSCORE header field (see Section 13.4) is used for
 * carrying the content of the CoAP OSCORE option when
 * transporting OSCORE messages over HTTP hops.
 *
 * @see [Documentation → RFC 8613 §11.1](https://datatracker.ietf.org/doc/html/rfc8613#section-11.1)
 * @see [Specification → RFC 8613](https://webconcepts.info/specs/IETF/RFC/8613)
 */
export type HttpHeaderOSCORE = 'OSCORE';

/**
 * An optional extension declaration indicates that the
 * ultimate recipient of the extension MAY consult and adhere
 * to the rules given by the extension when processing the
 * message, or ignore the extension declaration completely. An
 * agent may not be able to distinguish whether the ultimate
 * recipient does not understand an extension referred to by an
 * optional extension or simply ignores the extension
 * declaration.
 *
 * @see [Documentation → RFC 2774 §4.1](https://datatracker.ietf.org/doc/html/rfc2774#section-4.1)
 * @see [Specification → RFC 2774](https://webconcepts.info/specs/IETF/RFC/2774)
 */
export type HttpHeaderOpt = 'Opt';

/**
 * The Optional-WWW-Authenticate header enables a non-mandatory
 * authentication, which is not possible under the current HTTP
 * authentication mechanism.
 *
 * @see [Documentation → RFC 8053 §3](https://datatracker.ietf.org/doc/html/rfc8053#section-3)
 * @see [Specification → RFC 8053](https://webconcepts.info/specs/IETF/RFC/8053)
 */
export type HttpHeaderOptionalWWWAuthenticate = 'Optional-WWW-Authenticate';

/**
 * When a collection is created, the client MAY request that it
 * be ordered and specify the semantics of the ordering by
 * using the new Ordering-Type header with a MKCOL request. For
 * collections that are ordered, the client SHOULD identify the
 * semantics of the ordering with a URI in the Ordering-Type
 * header, although the client MAY simply set the header value
 * to DAV:custom to indicate that the collection is ordered but
 * the semantics of the ordering are not being advertised.
 *
 * @see [Documentation → RFC 3648 §5.1](https://datatracker.ietf.org/doc/html/rfc3648#section-5.1)
 * @see [Specification → RFC 3648](https://webconcepts.info/specs/IETF/RFC/3648)
 */
export type HttpHeaderOrderingType = 'Ordering-Type';

/**
 * The Origin header indicates where the cross-origin request
 * or preflight request originates from.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#http-origin)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderOrigin = 'Origin';

/**
 * The user agent includes stored cookies whose "origin-flag"
 * is set in the "Origin-Cookie" request header. When the user
 * agent generates an HTTP request, it MUST NOT attach more
 * than one "Origin-Cookie" header field.
 *
 * @see [Documentation → Internet Draft west-origin-cookies §4.4](https://datatracker.ietf.org/doc/html/draft-west-origin-cookies#section-4.4)
 * @see [Specification → Internet Draft west-origin-cookies](https://webconcepts.info/specs/IETF/I-D/west-origin-cookies)
 */
export type HttpHeaderOriginCookie = 'Origin-Cookie';

/**
 * The Overwrite request header specifies whether the server
 * should overwrite a resource mapped to the destination URL
 * during a COPY or MOVE.
 *
 * @see [Documentation → RFC 4918 §10.6](https://datatracker.ietf.org/doc/html/rfc4918#section-10.6)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderOverwrite = 'Overwrite';

/**
 * Any document retrieved by HTTP may point to a policy
 * reference file through the use of a new response header, the
 * P3P header. If a site is using P3P headers, it SHOULD
 * include this on responses for all appropriate request
 * methods, including HEAD and OPTIONS requests. The P3P header
 * gives one or more comma-separated directives.
 *
 * @see [Documentation → The Platform for Privacy Preferences 1.0 (P3P1.0) Specification](https://www.w3.org/TR/P3P/#syntax_ext)
 * @see [Specification → The Platform for Privacy Preferences 1.0 (P3P1.0) Specification](https://webconcepts.info/specs/W3C/TR/P3P)
 */
export type HttpHeaderP3P = 'P3P';

/**
 * PEP end-to-end declarations must be transmitted to the
 * ultimate recipient of the declaration. The PEP header field
 * is an end-to-end header field.
 *
 * @see [Documentation → PEP - an Extension Mechanism for HTTP](https://www.w3.org/TR/WD-http-pep-971121.html#_Toc404743947)
 * @see [Specification → PEP - an Extension Mechanism for HTTP](https://webconcepts.info/specs/W3C/TR/WD-http-pep)
 */
export type HttpHeaderPEP = 'PEP';

/**
 * PEP end-to-end policies MUST be transmitted to the ultimate
 * recipient of a message.
 *
 * @see [Documentation → PEP - an Extension Mechanism for HTTP](https://www.w3.org/TR/WD-http-pep-971121.html#_Toc404743953)
 * @see [Specification → PEP - an Extension Mechanism for HTTP](https://webconcepts.info/specs/W3C/TR/WD-http-pep)
 */
export type HttpHeaderPEPInfo = 'PEP-Info';

/**
 * The Permissions-Policy HTTP response header allows a site to
 * control which features and APIs can be used in the browser.
 *
 * @see [Documentation → Permissions Policy](https://www.w3.org/TR/permissions-policy-1/#permissions-policy-http-header-field)
 * @see [Specification → Permissions Policy](https://www.w3.org/TR/permissions-policy-1/)
 */
export type HttpHeaderPermissionsPolicy = 'Permissions-Policy';

/**
 * The POE HTTP header is a request-header field whose
 * field-value indicates the version of POE that a client
 * supports.
 *
 * @see [Documentation → Internet Draft nottingham-http-poe §4](https://datatracker.ietf.org/doc/html/draft-nottingham-http-poe-00#section-4)
 * @see [Specification → Internet Draft nottingham-http-poe](https://webconcepts.info/specs/IETF/I-D/nottingham-http-poe)
 */
export type HttpHeaderPOE = 'POE';

/**
 * The POE-Links HTTP header is an entity-header field whose
 * field-value is a comma-separated list of quoted
 * URI-references (without fragment identifiers) that the
 * origin server asserts to be POE resources. The contents of
 * the POE-Links response header SHOULD correspond to links
 * found in the content of the response body.
 *
 * @see [Documentation → Internet Draft nottingham-http-poe §3](https://datatracker.ietf.org/doc/html/draft-nottingham-http-poe-00#section-3)
 * @see [Specification → Internet Draft nottingham-http-poe](https://webconcepts.info/specs/IETF/I-D/nottingham-http-poe)
 */
export type HttpHeaderPOELinks = 'POE-Links';

/**
 * When a new member is added to a collection with a
 * client-maintained ordering (for example, with PUT, COPY, or
 * MKCOL), its position in the ordering can be set with the new
 * Position header. The Position header allows the client to
 * specify that an internal member URI should be first in the
 * collection's ordering, last in the collection's ordering,
 * immediately before some other internal member URI in the
 * collection's ordering, or immediately after some other
 * internal member URI in the collection's ordering.
 *
 * @see [Documentation → RFC 3648 §6.1](https://datatracker.ietf.org/doc/html/rfc3648#section-6.1)
 * @see [Specification → RFC 3648](https://webconcepts.info/specs/IETF/RFC/3648)
 */
export type HttpHeaderPosition = 'Position';

/**
 * The "Pragma" header field allows backwards compatibility
 * with HTTP/1.0 caches, so that clients can specify a
 * "no-cache" request that they will understand (as
 * Cache-Control was not defined until HTTP/1.1). When the
 * Cache-Control header field is also present and understood in
 * a request, Pragma is ignored.
 *
 * @see [Documentation → RFC 7234 §5.4](https://datatracker.ietf.org/doc/html/rfc7234#section-5.4)
 * @see [Specification → RFC 7234](https://webconcepts.info/specs/IETF/RFC/7234)
 */
export type HttpHeaderPragma = 'Pragma';

/**
 * The Prefer request header field is used to indicate that
 * particular server behaviors are preferred by the client, but
 * not required for successful completion of the request.
 * Prefer is similar in nature to the Expect header field with
 * the exception that servers are allowed to ignore stated
 * preferences.
 *
 * @see [Documentation → RFC 7240 §2](https://datatracker.ietf.org/doc/html/rfc7240#section-2)
 * @see [Specification → RFC 7240](https://webconcepts.info/specs/IETF/RFC/7240)
 */
export type HttpHeaderPrefer = 'Prefer';

/**
 * "Prefer-Push" is an HTTP header field that a client may use
 * to request that a server uses HTTP/2 Push to send related
 * resources as identified by their link relationships.
 *
 * @see [Documentation → Internet Draft pot-prefer-push §3](https://datatracker.ietf.org/doc/html/draft-pot-prefer-push#section-3)
 * @see [Specification → Internet Draft pot-prefer-push](https://webconcepts.info/specs/IETF/I-D/pot-prefer-push)
 */
export type HttpHeaderPreferPush = 'Prefer-Push';

/**
 * The Preference-Applied response header MAY be included
 * within a response message as an indication as to which
 * Prefer tokens were honored by the server and applied to the
 * processing of a request.
 *
 * @see [Documentation → RFC 7240 §3](https://datatracker.ietf.org/doc/html/rfc7240#section-3)
 * @see [Specification → RFC 7240](https://webconcepts.info/specs/IETF/RFC/7240)
 */
export type HttpHeaderPreferenceApplied = 'Preference-Applied';

/**
 * The Priority HTTP header field can appear in requests and
 * responses. A client uses it to specify the priority of the
 * response. A server uses it to inform the client that the
 * priority was overwritten. An intermediary can use the
 * Priority information from client requests and server
 * responses to correct or amend the precedence to suit it. The
 * Priority header field is an end-to-end signal of the request
 * priority from the client or the response priority from the
 * server.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-priority §5](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-priority#section-5)
 * @see [Specification → Internet Draft ietf-httpbis-priority](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-priority)
 */
export type HttpHeaderPriority = 'Priority';

/**
 * The "Proxy-Authenticate" header field consists of at least
 * one challenge that indicates the authentication scheme(s)
 * and parameters applicable to the proxy for this effective
 * request URI. It MUST be included as part of a 407 (Proxy
 * Authentication Required) response.
 *
 * @see [Documentation → RFC 7235 §4.2](https://datatracker.ietf.org/doc/html/rfc7235#section-4.2)
 * @see [Specification → RFC 7235](https://webconcepts.info/specs/IETF/RFC/7235)
 */
export type HttpHeaderProxyAuthenticate = 'Proxy-Authenticate';

/**
 * The Proxy-Authentication-Info response header field is
 * equivalent to Authentication-Info, except that it applies to
 * proxy authentication. However, unlike Authentication-Info,
 * the Proxy-Authentication-Info header field applies only to
 * the next outbound client on the response chain. This is
 * because only the client that chose a given proxy is likely
 * to have the credentials necessary for authentication.
 *
 * @see [Documentation → RFC 7615 §4](https://datatracker.ietf.org/doc/html/rfc7615#section-4)
 * @see [Specification → RFC 7615](https://webconcepts.info/specs/IETF/RFC/7615)
 */
export type HttpHeaderProxyAuthenticationInfo = 'Proxy-Authentication-Info';

/**
 * The "Proxy-Authorization" header field allows the client to
 * identify itself (or its user) to a proxy that requires
 * authentication. Its value consists of credentials containing
 * the authentication information of the client for the proxy
 * and/or realm of the resource being requested.
 *
 * @see [Documentation → RFC 7235 §4.3](https://datatracker.ietf.org/doc/html/rfc7235#section-4.3)
 * @see [Specification → RFC 7235](https://webconcepts.info/specs/IETF/RFC/7235)
 */
export type HttpHeaderProxyAuthorization = 'Proxy-Authorization';

/**
 * The proxy features header is used by a proxy sending data to
 * a server. It specifies the features supported by the
 * specified proxy.
 *
 * @see [Documentation → Notification for Proxy Caches](https://www.w3.org/TR/WD-proxy)
 * @see [Specification → Notification for Proxy Caches](https://webconcepts.info/specs/W3C/TR/WD-proxy)
 */
export type HttpHeaderProxyFeatures = 'Proxy-Features';

/**
 * The proxy instruction header is used to reply to a proxy
 * features header. It should only be present when a
 * Proxy-Features header was present in the corresponding
 * request.
 *
 * @see [Documentation → Notification for Proxy Caches](https://www.w3.org/TR/WD-proxy)
 * @see [Specification → Notification for Proxy Caches](https://webconcepts.info/specs/W3C/TR/WD-proxy)
 */
export type HttpHeaderProxyInstruction = 'Proxy-Instruction';

/**
 * The Proxy-Status HTTP response field allows an intermediary
 * to convey additional information about its handling of a
 * response and its associated request.
 *
 * @see [Documentation → RFC 9209 §2](https://datatracker.ietf.org/doc/html/rfc9209#section-2)
 * @see [Specification → RFC 9209](https://webconcepts.info/specs/IETF/RFC/9209)
 */
export type HttpHeaderProxyStatus = 'Proxy-Status';

/**
 * The Public response-header field lists the set of methods
 * supported by the server. The purpose of this field is
 * strictly to inform the recipient of the capabilities of the
 * server regarding unusual methods. The methods listed may or
 * may not be applicable to the Request-URI; the Allow header
 * field MAY be used to indicate methods allowed for a
 * particular URI.
 *
 * @see [Documentation → RFC 2068 §14.35](https://datatracker.ietf.org/doc/html/rfc2068#section-14.35)
 * @see [Specification → RFC 2068](https://webconcepts.info/specs/IETF/RFC/2068)
 */
export type HttpHeaderPublic = 'Public';

/**
 * Whenever a UA receives a Valid Pinning Header, it MUST set
 * its Pinning Metadata to the exact Pins, Effective Expiration
 * Date (computed from max-age), and (if any) report-uri given
 * in the most recently received Valid Pinning Header.
 *
 * @see [Documentation → RFC 7469 §2.5](https://datatracker.ietf.org/doc/html/rfc7469#section-2.5)
 * @see [Specification → RFC 7469](https://webconcepts.info/specs/IETF/RFC/7469)
 */
export type HttpHeaderPublicKeyPins = 'Public-Key-Pins';

/**
 * Upon receipt of a Public-Key-Pins-Report-Only response
 * header field, the UA should evaluate the policy expressed in
 * the field, and SHOULD generate and send a report. However,
 * failure to validate the Pins in the field MUST have no
 * effect on the validity or non-validity of the policy
 * expressed in the PKP field or in previously noted Pins for
 * the Known Pinned Host.
 *
 * @see [Documentation → RFC 7469 §2.5](https://datatracker.ietf.org/doc/html/rfc7469#section-2.5)
 * @see [Specification → RFC 7469](https://webconcepts.info/specs/IETF/RFC/7469)
 */
export type HttpHeaderPublicKeyPinsReportOnly = 'Public-Key-Pins-Report-Only';

/**
 * A server can indicate to a client the push policy it used
 * when processing a request by sending a "Push-Policy" header
 * field in the corresponding response.
 *
 * @see [Documentation → Internet Draft ruellan-http-accept-push-policy §3.2](https://datatracker.ietf.org/doc/html/draft-ruellan-http-accept-push-policy#section-3.2)
 * @see [Specification → Internet Draft ruellan-http-accept-push-policy](https://webconcepts.info/specs/IETF/I-D/ruellan-http-accept-push-policy)
 */
export type HttpHeaderPushPolicy = 'Push-Policy';

/**
 * The "Range" header field on a GET request modifies the
 * method semantics to request transfer of only one or more
 * subranges of the selected representation data, rather than
 * the entire selected representation data.
 *
 * @see [Documentation → RFC 7233 §3.1](https://datatracker.ietf.org/doc/html/rfc7233#section-3.1)
 * @see [Specification → RFC 7233](https://webconcepts.info/specs/IETF/RFC/7233)
 */
export type HttpHeaderRange = 'Range';

/**
 * The RateLimit-Limit response header field indicates the
 * maximum number of requests that the server allocated to the
 * client in the current time-window.
 *
 * @see [Documentation → Internet Draft ietf-httpapi-ratelimit-headers §3.1](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers#section-3.1)
 * @see [Specification → Internet Draft ietf-httpapi-ratelimit-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpapi-ratelimit-headers)
 */
export type HttpHeaderRateLimitLimit = 'RateLimit-Limit';

/**
 * The RateLimit-Remaining response header field indicates the
 * number of requests left for the client until the quota
 * resets.
 *
 * @see [Documentation → Internet Draft ietf-httpapi-ratelimit-headers §3.2](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers#section-3.2)
 * @see [Specification → Internet Draft ietf-httpapi-ratelimit-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpapi-ratelimit-headers)
 */
export type HttpHeaderRateLimitRemaining = 'RateLimit-Remaining';

/**
 * The RateLimit-Reset response header field indicates either
 * the number of seconds until the quota resets, or the
 * timestamp when the quota resets.
 *
 * @see [Documentation → Internet Draft ietf-httpapi-ratelimit-headers §3.3](https://datatracker.ietf.org/doc/html/draft-polli-ratelimit-headers#section-3.3)
 * @see [Specification → Internet Draft ietf-httpapi-ratelimit-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpapi-ratelimit-headers)
 */
export type HttpHeaderRateLimitReset = 'RateLimit-Reset';

/**
 * The Redirect-Ref header is used in all 3xx responses from
 * redirect reference resources. The value is the link target
 * as specified during redirect reference resource creation.
 *
 * @see [Documentation → RFC 4437 §12.1](https://datatracker.ietf.org/doc/html/rfc4437#section-12.1)
 * @see [Specification → RFC 4437](https://webconcepts.info/specs/IETF/RFC/4437)
 */
export type HttpHeaderRedirectRef = 'Redirect-Ref';

/**
 * The "Referer" header field allows the user agent to specify
 * a URI reference for the resource from which the target URI
 * was obtained (i.e., the "referrer", though the field name is
 * misspelled).
 *
 * @see [Documentation → RFC 7231 §5.5.2](https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderReferer = 'Referer';

/**
 * The Referrer-Policy header controls how much referrer
 * information (sent via the Referer header) should be included
 * with requests made.
 *
 * @see [Documentation → Referrer Policy](https://www.w3.org/TR/referrer-policy/#referrer-policy-header-dfn)
 * @see [Specification → Referrer Policy](https://www.w3.org/TR/referrer-policy/)
 */
export type HttpHeaderReferrerPolicy = 'Referrer-Policy';

/**
 * Repeatability-Client-ID is an optional header that MAY be
 * provided by the client. Repeatability-Client-ID is an opaque
 * string representing a client-generated, globally unique for
 * all time, identifier for the instance of the client
 * application that issued the request.
 *
 * @see [Documentation → OASIS Standard repeatable-requests-v1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityClientID)
 * @see [Specification → OASIS Standard repeatable-requests-v1.0](https://webconcepts.info/specs/OASIS/standard/repeatable-requests-v1.0)
 */
export type HttpHeaderRepeatabilityClientID = 'Repeatability-Client-ID';

/**
 * Repeatability-First-Sent MUST be sent by clients to specify
 * that a request is repeatable. Repeatability-First-Sent is
 * used to specify the date and time at which the request was
 * first created.
 *
 * @see [Documentation → OASIS Standard repeatable-requests-v1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityFirstSent)
 * @see [Specification → OASIS Standard repeatable-requests-v1.0](https://webconcepts.info/specs/OASIS/standard/repeatable-requests-v1.0)
 */
export type HttpHeaderRepeatabilityFirstSent = 'Repeatability-First-Sent';

/**
 * Repeatability-Request-ID MUST be sent by clients to specify
 * that a request is repeatable. The value of the
 * Repeatability-Request-ID is an opaque string representing a
 * client-generated, globally unique for all time, identifier
 * for the request.
 *
 * @see [Documentation → OASIS Standard repeatable-requests-v1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityRequestID)
 * @see [Specification → OASIS Standard repeatable-requests-v1.0](https://webconcepts.info/specs/OASIS/standard/repeatable-requests-v1.0)
 */
export type HttpHeaderRepeatabilityRequestID = 'Repeatability-Request-ID';

/**
 * Servers aware of repeatability MUST return the
 * Repeatability-Result response header in the result of a
 * repeatable request with one of the case-insensitive values
 * accepted or rejected.
 *
 * @see [Documentation → OASIS Standard repeatable-requests-v1.0](https://docs.oasis-open.org/odata/repeatable-requests/v1.0/cs01/repeatable-requests-v1.0-cs01.html#sec_RepeatabilityResult)
 * @see [Specification → OASIS Standard repeatable-requests-v1.0](https://webconcepts.info/specs/OASIS/standard/repeatable-requests-v1.0)
 */
export type HttpHeaderRepeatabilityResult = 'Repeatability-Result';

/**
 * The Report-To HTTP response header field instructs the user
 * agent to store reporting endpoints for an origin.
 *
 * @see [Documentation → Reporting API](https://www.w3.org/TR/reporting-1/#header)
 * @see [Specification → Reporting API](https://webconcepts.info/specs/W3C/TR/reporting-1)
 */
export type HttpHeaderReportTo = 'Report-To';

/**
 * The Repr-Digest HTTP field can be used in requests and
 * responses to communicate digests that are calculated using a
 * hashing algorithm applied to the entire selected
 * representation data.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-digest-headers §3](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-digest-headers#section-3)
 * @see [Specification → Internet Draft ietf-httpbis-digest-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-digest-headers)
 */
export type HttpHeaderReprDigest = 'Repr-Digest';

/**
 * Servers send the "Retry-After" header field to indicate how
 * long the user agent ought to wait before making a follow-up
 * request. When sent with a 503 (Service Unavailable)
 * response, Retry-After indicates how long the service is
 * expected to be unavailable to the client. When sent with any
 * 3xx (Redirection) response, Retry-After indicates the
 * minimum time that the user agent is asked to wait before
 * issuing the redirected request.
 *
 * @see [Documentation → RFC 7231 §7.1.3](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.3)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderRetryAfter = 'Retry-After';

/**
 * The RTT HTTP header field is used to indicate the round-trip
 * time of the request. The RTT is measured in milliseconds,
 * rounded to nearest multiple of 25 milliseconds, and is based
 * on recently observed application-layer RTT measurements
 * across recently active connections, excluding connections
 * made to private address space.
 *
 * @see [Documentation → WICG Network Information API](https://wicg.github.io/netinfo/#rtt-request-header-field)
 * @see [Specification → WICG Network Information API](https://wicg.github.io/netinfo/)
 */
export type HttpHeaderRTT = 'RTT';

/**
 * The Save-Data request header allows a client to hint to the
 * server about its preferences regarding the use of data for
 * the given request.
 *
 * @see [Documentation → WICG Save Data API](https://wicg.github.io/savedata/#dfn-save-data)
 * @see [Specification → WICG Save Data API](https://wicg.github.io/savedata/)
 */
export type HttpHeaderSaveData = 'Save-Data';

/**
 * The SOAPAction HTTP request header field can be used to
 * indicate the intent of the SOAP HTTP request. The value is a
 * URI identifying the intent. SOAP places no restrictions on
 * the format or specificity of the URI or that it is
 * resolvable. An HTTP client MUST use this header field when
 * issuing a SOAP HTTP Request.
 *
 * @see [Documentation → Simple Object Access Protocol (SOAP) 1.1](https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383528)
 * @see [Specification → Simple Object Access Protocol (SOAP) 1.1](https://webconcepts.info/specs/W3C/TR/SOAP)
 */
export type HttpHeaderSOAPAction = 'SOAPAction';

/**
 * The Safe response header field is used by origin servers to
 * indicate whether repeating the received HTTP request is safe
 * in the sense of Section 9.1.1 (Safe Methods) of the HTTP/1.1
 * specification. For the purpose of this specification, a HTTP
 * request is considered to be a repetition of a previous
 * request if both requests are issued by the same user agent,
 * and apply to the same resource, and have the same request
 * method, and both have no request body, or both have request
 * bodies which are byte-wise identical after decoding of any
 * content and transfer codings.
 *
 * @see [Documentation → RFC 2310 §4](https://datatracker.ietf.org/doc/html/rfc2310#section-4)
 * @see [Specification → RFC 2310](https://webconcepts.info/specs/IETF/RFC/2310)
 */
export type HttpHeaderSafe = 'Safe';

/**
 * The Schedule-Reply request header is used by a client to
 * indicate to a server whether or not a scheduling operation
 * ought to occur when an "Attendee" deletes a scheduling
 * object resource. In particular, it controls whether a reply
 * scheduling message is sent to the "Organizer" as a result of
 * the removal. There are situations in which unsolicited
 * scheduling messages need to be silently removed (or ignored)
 * for security or privacy reasons. This request header allows
 * the scheduling object resource to be removed if such a need
 * arises.
 *
 * @see [Documentation → RFC 6638 §8.1](https://datatracker.ietf.org/doc/html/rfc6638#section-8.1)
 * @see [Specification → RFC 6638](https://webconcepts.info/specs/IETF/RFC/6638)
 */
export type HttpHeaderScheduleReply = 'Schedule-Reply';

/**
 * The Schedule-Tag response header provides the current value
 * of the CALDAV:schedule-tag property value.
 *
 * @see [Documentation → RFC 6638 §8.2](https://datatracker.ietf.org/doc/html/rfc6638#section-8.2)
 * @see [Specification → RFC 6638](https://webconcepts.info/specs/IETF/RFC/6638)
 */
export type HttpHeaderScheduleTag = 'Schedule-Tag';

/**
 * The Sec-CH-Forced-Colors request header field is a
 * high-entropy client hint gives a server information about
 * the user's forced color scheme. It is based on the
 * `forced-colors` CSS media feature.
 *
 * @see [Documentation → WICG User Preference Media Features Headers](https://wicg.github.io/user-preference-media-features-headers/#sec-ch-forced-colors)
 * @see [Specification → WICG User Preference Media Features Headers](https://wicg.github.io/user-preference-media-features-headers/)
 */
export type HttpHeaderSecCHForcedColors = 'Sec-CH-Forced-Colors';

/**
 * The Sec-CH-Prefers-Color-Scheme request header field is a
 * high-entropy client hint gives a server information about
 * the user's preference for color scheme. It is based on the
 * `prefers-color-scheme` CSS media feature.
 *
 * @see [Documentation → WICG User Preference Media Features Headers](https://wicg.github.io/user-preference-media-features-headers/#sec-ch-prefers-color-scheme)
 * @see [Specification → WICG User Preference Media Features Headers](https://wicg.github.io/user-preference-media-features-headers/)
 */
export type HttpHeaderSecCHPrefersColorScheme = 'Sec-CH-Prefers-Color-Scheme';

/**
 * The Sec-CH-Prefers-Contrast request header field is a
 * high-entropy client hint gives a server information about
 * the user's preference for color contrast. It is based on the
 * `prefers-contrast` CSS media feature.
 *
 * @see [Documentation → WICG User Preference Media Features Headers](https://wicg.github.io/user-preference-media-features-headers/#sec-ch-prefers-contrast)
 * @see [Specification → WICG User Preference Media Features Headers](https://wicg.github.io/user-preference-media-features-headers/)
 */
export type HttpHeaderSecCHPrefersContrast = 'Sec-CH-Prefers-Contrast';

/**
 * The Sec-CH-Prefers-Reduced-Data request header field is a
 * high-entropy client hint gives a server information about
 * the user's preference for reduced data. It is based on the
 * `prefers-reduced-data` CSS media feature.
 *
 * @see [Documentation → WICG User Preference Media Features Client Hints Headers](https://wicg.github.io/user-preference-media-features-headers/#sec-ch-prefers-reduced-data)
 * @see [Specification → WICG User Preference Media Features Client Hints Headers](https://wicg.github.io/user-preference-media-features-headers/)
 */
export type HttpHeaderSecCHPrefersReducedData = 'Sec-CH-Prefers-Reduced-Data';

/**
 * The Sec-CH-Prefers-Reduced-Motion request header field is a
 * high-entropy client hint gives a server information about
 * the user's preference for reduced motion. It is based on the
 * `prefers-reduced-motion` CSS media feature.
 *
 * @see [Documentation → WICG User Preference Media Features Client Hints Headers](https://wicg.github.io/user-preference-media-features-headers/#sec-ch-prefers-reduced-motion)
 * @see [Specification → WICG User Preference Media Features Client Hints Headers](https://wicg.github.io/user-preference-media-features-headers/)
 */
export type HttpHeaderSecCHPrefersReducedMotion = 'Sec-CH-Prefers-Reduced-Motion';

/**
 * The Sec-CH-UA-Arch request header field gives a server
 * information about the architecture of the platform on which
 * a given user agent is executing.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-arch)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAArch = 'Sec-CH-UA-Arch';

/**
 * The Sec-CH-UA-Bitness request header field gives a server
 * information about the bitness about the architecture of the
 * platform on which a given user agent is executing.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-bitness)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUABitness = 'Sec-CH-UA-Bitness';

/**
 * The Sec-CH-UA-Full-Version request header field gives a
 * server information about the full version of the user agent.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-full-version)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAFullVersion = 'Sec-CH-UA-Full-Version';

/**
 * The Sec-CH-UA-Full-Version-List request header field gives a
 * server information about the full version of the user agent.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-full-version-list)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAFullVersionList = 'Sec-CH-UA-Full-Version-List';

/**
 * The Sec-CH-UA-Mobile request header field gives a server
 * information about whether the user agent prefers a "mobile"
 * experience.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-mobile)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAMobile = 'Sec-CH-UA-Mobile';

/**
 * The Sec-CH-UA-Model request header field gives a server
 * information about the model of the user agent.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-model)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAModel = 'Sec-CH-UA-Model';

/**
 * The Sec-CH-UA-Platform request header field gives a server
 * information about the platform of the user agent.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAPlatform = 'Sec-CH-UA-Platform';

/**
 * The Sec-CH-UA-Platform-Version request header field gives a
 * server information about the platform version of the user
 * agent.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform-version)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAPlatformVersion = 'Sec-CH-UA-Platform-Version';

/**
 * The Sec-CH-UA-WoW64 request header field gives a server
 * information about whether or not a user agent binary is
 * running in 32-bit mode on 64-bit Windows.
 *
 * @see [Documentation → WICG User-Agent Client Hints](https://wicg.github.io/ua-client-hints/#sec-ch-ua-wow64)
 * @see [Specification → WICG User-Agent Client Hints](https://webconcepts.info/specs/WICG/UA-CH)
 */
export type HttpHeaderSecCHUAWoW64 = 'Sec-CH-UA-WoW64';

/**
 * The Sec-COWL HTTP request and response headers are used by
 * user agents and servers to convey label metadata to servers
 * and user agents, respectively.
 *
 * @see [Documentation → Confinement with Origin Web Labels](https://www.w3.org/TR/COWL/#header)
 * @see [Specification → Confinement with Origin Web Labels](https://webconcepts.info/specs/W3C/TR/COWL)
 */
export type HttpHeaderSecCOWL = 'Sec-COWL';

/**
 * The Sec-Fetch-Dest HTTP request header exposes a request's
 * destination to a server.
 *
 * @see [Documentation → Fetch Metadata Request Headers](https://www.w3.org/TR/fetch-metadata/#sec-fetch-dest-header)
 * @see [Specification → Fetch Metadata Request Headers](https://webconcepts.info/specs/W3C/TR/fetch-metadata)
 */
export type HttpHeaderSecFetchDest = 'Sec-Fetch-Dest';

/**
 * The Sec-Fetch-Mode HTTP request header exposes a request's
 * mode to a server.
 *
 * @see [Documentation → Fetch Metadata Request Headers](https://www.w3.org/TR/fetch-metadata/#sec-fetch-mode-header)
 * @see [Specification → Fetch Metadata Request Headers](https://webconcepts.info/specs/W3C/TR/fetch-metadata)
 */
export type HttpHeaderSecFetchMode = 'Sec-Fetch-Mode';

/**
 * The Sec-Fetch-Site HTTP request header exposes the
 * relationship between a request initiator’s origin and its
 * target’s origin.
 *
 * @see [Documentation → Fetch Metadata Request Headers](https://www.w3.org/TR/fetch-metadata/#sec-fetch-site-header)
 * @see [Specification → Fetch Metadata Request Headers](https://webconcepts.info/specs/W3C/TR/fetch-metadata)
 */
export type HttpHeaderSecFetchSite = 'Sec-Fetch-Site';

/**
 * The Sec-Fetch-User HTTP request header exposes whether or
 * not a navigation request was triggered by user activation.
 *
 * @see [Documentation → Fetch Metadata Request Headers](https://www.w3.org/TR/fetch-metadata/#sec-fetch-user-header)
 * @see [Specification → Fetch Metadata Request Headers](https://webconcepts.info/specs/W3C/TR/fetch-metadata)
 */
export type HttpHeaderSecFetchUser = 'Sec-Fetch-User';

/**
 * Once a client and server have negotiated the Token Binding
 * protocol with HTTP/1.1 or HTTP/2, clients MUST include a
 * Sec-Token-Binding header field in their HTTP requests and
 * MUST include only one such header field per HTTP request.
 * Also, the Sec-Token-Binding header field MUST NOT be
 * included in HTTP responses.
 *
 * @see [Documentation → RFC 8473 §2](https://datatracker.ietf.org/doc/html/rfc8473#section-2)
 * @see [Specification → RFC 8473](https://webconcepts.info/specs/IETF/RFC/8473)
 */
export type HttpHeaderSecTokenBinding = 'Sec-Token-Binding';

/**
 * The Sec-WebSocket-Accept header field is used in the
 * WebSocket opening handshake. It is sent from the server to
 * the client to confirm that the server is willing to initiate
 * the WebSocket connection.
 *
 * @see [Documentation → RFC 6455 §11.3.3](https://datatracker.ietf.org/doc/html/rfc6455#section-11.3.3)
 * @see [Specification → RFC 6455](https://webconcepts.info/specs/IETF/RFC/6455)
 */
export type HttpHeaderSecWebSocketAccept = 'Sec-WebSocket-Accept';

/**
 * The Sec-WebSocket-Extensions header field is used in the
 * WebSocket opening handshake. It is initially sent from the
 * client to the server, and then subsequently sent from the
 * server to the client, to agree on a set of protocol-level
 * extensions to use for the duration of the connection.
 *
 * @see [Documentation → RFC 6455 §11.3.2](https://datatracker.ietf.org/doc/html/rfc6455#section-11.3.2)
 * @see [Specification → RFC 6455](https://webconcepts.info/specs/IETF/RFC/6455)
 */
export type HttpHeaderSecWebSocketExtensions = 'Sec-WebSocket-Extensions';

/**
 * The Sec-WebSocket-Key header field is used in the WebSocket
 * opening handshake. It is sent from the client to the server
 * to provide part of the information used by the server to
 * prove that it received a valid WebSocket opening handshake.
 *
 * @see [Documentation → RFC 6455 §11.3.1](https://datatracker.ietf.org/doc/html/rfc6455#section-11.3.1)
 * @see [Specification → RFC 6455](https://webconcepts.info/specs/IETF/RFC/6455)
 */
export type HttpHeaderSecWebSocketKey = 'Sec-WebSocket-Key';

/**
 * The Sec-WebSocket-Protocol header field is used in the
 * WebSocket opening handshake. It is sent from the client to
 * the server and back from the server to the client to confirm
 * the subprotocol of the connection. This enables scripts to
 * both select a subprotocol and be sure that the server agreed
 * to serve that subprotocol.
 *
 * @see [Documentation → RFC 6455 §11.3.4](https://datatracker.ietf.org/doc/html/rfc6455#section-11.3.4)
 * @see [Specification → RFC 6455](https://webconcepts.info/specs/IETF/RFC/6455)
 */
export type HttpHeaderSecWebSocketProtocol = 'Sec-WebSocket-Protocol';

/**
 * The Sec-WebSocket-Version header field is used in the
 * WebSocket opening handshake. It is sent from the client to
 * the server to indicate the protocol version of the
 * connection. This enables servers to correctly interpret the
 * opening handshake and subsequent data being sent from the
 * data, and close the connection if the server cannot
 * interpret that data in a safe manner. The
 * Sec-WebSocket-Version header field is also sent from the
 * server to the client on WebSocket handshake error, when the
 * version received from the client does not match a version
 * understood by the server. In such a case, the header field
 * includes the protocol version(s) supported by the server.
 *
 * @see [Documentation → RFC 6455 §11.3.5](https://datatracker.ietf.org/doc/html/rfc6455#section-11.3.5)
 * @see [Specification → RFC 6455](https://webconcepts.info/specs/IETF/RFC/6455)
 */
export type HttpHeaderSecWebSocketVersion = 'Sec-WebSocket-Version';

/**
 * All S-HTTP compliant agents must generate the
 * Security-Scheme header in the headers of all HTTP messages
 * they generate. This header permits other agents to detect
 * that they are communicating with an S-HTTP compliant agent
 * and generate the appropriate cryptographic options headers.
 *
 * @see [Documentation → RFC 2660 §4.1](https://datatracker.ietf.org/doc/html/rfc2660#section-4.1)
 * @see [Specification → RFC 2660](https://webconcepts.info/specs/IETF/RFC/2660)
 */
export type HttpHeaderSecurityScheme = 'Security-Scheme';

/**
 * The "Server" header field contains information about the
 * software used by the origin server to handle the request,
 * which is often used by clients to help identify the scope of
 * reported interoperability problems, to work around or tailor
 * requests to avoid particular server limitations, and for
 * analytics regarding server or operating system use.
 *
 * @see [Documentation → RFC 7231 §7.4.2](https://datatracker.ietf.org/doc/html/rfc7231#section-7.4.2)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderServer = 'Server';

/**
 * The Server-Timing header field is used to communicate one or
 * more metrics and descriptions for the given request-response
 * cycle.
 *
 * @see [Documentation → Server Timing](https://www.w3.org/TR/server-timing/#the-server-timing-header-field)
 * @see [Specification → Server Timing](https://webconcepts.info/specs/W3C/TR/server-timing)
 */
export type HttpHeaderServerTiming = 'Server-Timing';

/**
 * An HTTP request to fetch a service worker's script resource
 * will include the Service-Worker header. It indicates that
 * this request is a service worker's script resource request.
 *
 * @see [Documentation → Service Workers](https://www.w3.org/TR/service-workers-1/#service-worker-script-request)
 * @see [Specification → Service Workers](https://webconcepts.info/specs/W3C/TR/service-workers-1)
 */
export type HttpHeaderServiceWorker = 'Service-Worker';

/**
 * An HTTP response to a service worker's script resource
 * request can include the Service-Worker-Allowed header. It
 * indicates that the user agent will override the path
 * restriction, which limits the maximum allowed scope url that
 * the script can control, to the given value.
 *
 * @see [Documentation → Service Workers](https://www.w3.org/TR/service-workers-1/#service-worker-script-response)
 * @see [Specification → Service Workers](https://webconcepts.info/specs/W3C/TR/service-workers-1)
 */
export type HttpHeaderServiceWorkerAllowed = 'Service-Worker-Allowed';

/**
 * An HTTP response to a navigation request can include the
 * Service-Worker-Navigation-Preload header. It indicates that
 * the user agent will preload the response for the navigation
 * request.
 *
 * @see [Documentation → Service Workers](https://www.w3.org/TR/service-workers-1/#service-worker-navigation-preload-response)
 * @see [Specification → Service Workers](https://webconcepts.info/specs/W3C/TR/service-workers-1)
 */
export type HttpHeaderServiceWorkerNavigationPreload = 'Service-Worker-Navigation-Preload';

/**
 * The Set-Cookie HTTP response header is used to send cookies
 * from the server to the user agent.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-rfc6265bis §4.1](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-4.1)
 * @see [Documentation → RFC 6265 §4.1](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1)
 * @see [Specification → Internet Draft ietf-httpbis-rfc6265bis](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-rfc6265bis)
 * @see [Specification → RFC 6265](https://webconcepts.info/specs/IETF/RFC/6265)
 */
export type HttpHeaderSetCookie = 'Set-Cookie';

/**
 * The origin server initiates a session, if it so desires. To
 * do so, it returns an extra response header to the client,
 * Set-Cookie2.
 *
 * @see [Documentation → RFC 2965 §3.2](https://datatracker.ietf.org/doc/html/rfc2965#section-3.2)
 * @see [Specification → RFC 2965](https://webconcepts.info/specs/IETF/RFC/2965)
 */
export type HttpHeaderSetCookie2 = 'Set-Cookie2';

/**
 * The "Signature" field is a Dictionary structured field
 * containing one or more message signatures generated from the
 * signature context of the target message. The member's key is
 * the label that uniquely identifies the message signature
 * within the HTTP message. The member's value is a Byte
 * Sequence containing the signature value for the message
 * signature identified by the label.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-message-signatures §4.2](https://httpwg.org/http-extensions/draft-ietf-httpbis-message-signatures.html#section-4.2)
 * @see [Specification → Internet Draft ietf-httpbis-message-signatures](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-message-signatures)
 */
export type HttpHeaderSignature = 'Signature';

/**
 * The "Signature-Input" field is a Dictionary structured field
 * containing the metadata for one or more message signatures
 * generated from components within the HTTP message. Each
 * member describes a single message signature.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-message-signatures §4.1](https://httpwg.org/http-extensions/draft-ietf-httpbis-message-signatures.html#section-4.1)
 * @see [Specification → Internet Draft ietf-httpbis-message-signatures](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-message-signatures)
 */
export type HttpHeaderSignatureInput = 'Signature-Input';

/**
 * Slug is an HTTP entity-header whose presence in a POST to a
 * Collection constitutes a request by the client to use the
 * header's value as part of any URIs that would normally be
 * used to retrieve the to-be-created Entry or Media Resources.
 *
 * @see [Documentation → RFC 5023 §9.7](https://datatracker.ietf.org/doc/html/rfc5023#section-9.7)
 * @see [Specification → RFC 5023](https://webconcepts.info/specs/IETF/RFC/5023)
 */
export type HttpHeaderSlug = 'Slug';

/**
 * The SourceMap HTTP response header is used to indicate to
 * the browser where to find the source map for a JavaScript
 * file.
 *
 * @see [Documentation → Source Map Revision 3 Proposal](https://sourcemaps.info/spec.html#h.lmz475t4mvbx)
 * @see [Specification → Source Map Revision 3 Proposal](https://sourcemaps.info/spec.html)
 */
export type HttpHeaderSourceMap = 'SourceMap';

/**
 * The Status-URI response header may be used with the 102
 * (Processing) status code to inform the client as to the
 * status of a method.
 *
 * @see [Documentation → RFC 2518 §9.7](https://datatracker.ietf.org/doc/html/rfc2518#section-9.7)
 * @see [Specification → RFC 2518](https://webconcepts.info/specs/IETF/RFC/2518)
 */
export type HttpHeaderStatusURI = 'Status-URI';

/**
 * The Strict-Transport-Security HTTP response header field
 * (STS header field) indicates to a UA that it MUST enforce
 * the HSTS Policy in regards to the host emitting the response
 * message containing this header field.
 *
 * @see [Documentation → RFC 6797 §6.1](https://datatracker.ietf.org/doc/html/rfc6797#section-6.1)
 * @see [Specification → RFC 6797](https://webconcepts.info/specs/IETF/RFC/6797)
 */
export type HttpHeaderStrictTransportSecurity = 'Strict-Transport-Security';

/**
 * The SubOK request header field is used to provide directives
 * from an end-client to a proxy cache regarding the possible
 * substitution of an instance body from a cached response for
 * one resource instance for the instance body of the resource
 * instance specified by the client's request.
 *
 * @see [Documentation → Internet Draft mogul-http-dupsup §5.2.1](https://datatracker.ietf.org/doc/html/draft-mogul-http-dupsup#section-5.2.1)
 * @see [Specification → Internet Draft mogul-http-dupsup](https://webconcepts.info/specs/IETF/I-D/mogul-http-dupsup)
 */
export type HttpHeaderSubOK = 'SubOK';

/**
 * The Subst response-header field MUST be used by a proxy to
 * supply the URI of the original source of an entity-body, if
 * the source is different from the client's Request-URI, and
 * if the client's request included the "inform" directive in a
 * SubOK request header field.
 *
 * @see [Documentation → Internet Draft mogul-http-dupsup §5.2.2](https://datatracker.ietf.org/doc/html/draft-mogul-http-dupsup#section-5.2.2)
 * @see [Specification → Internet Draft mogul-http-dupsup](https://webconcepts.info/specs/IETF/I-D/mogul-http-dupsup)
 */
export type HttpHeaderSubst = 'Subst';

/**
 * The Sunset HTTP response header field allows a server to
 * communicate the fact that a resource is expected to become
 * unresponsive at a specific point in time. It provides
 * information for clients which they can use to control their
 * usage of the resource. The Sunset header contains a single
 * timestamp which advertises the point in time when the
 * resource is expected to become unresponsive.
 *
 * @see [Documentation → RFC 8594 §3](https://datatracker.ietf.org/doc/html/rfc8594#section-3)
 * @see [Specification → RFC 8594](https://webconcepts.info/specs/IETF/RFC/8594)
 */
export type HttpHeaderSunset = 'Sunset';

/**
 * The Surrogate-Capability request header allows surrogates to
 * advertise their capabilities with capability tokens.
 * Capability tokens indicate sets of operations (e.g.,
 * caching, processing) that a surrogate is willing to perform.
 * They follow the form of product tokens in HTTP.
 *
 * @see [Documentation → Edge Architecture Specification](https://www.w3.org/TR/edge-arch/)
 * @see [Specification → Edge Architecture Specification](https://webconcepts.info/specs/W3C/TR/edge-arch)
 */
export type HttpHeaderSurrogateCapability = 'Surrogate-Capability';

/**
 * The Surrogate-Control response header allows origin servers
 * to dictate how surrogates should handle response entities,
 * with control directives. Currently defined directives
 * control processing and cache behavior.
 *
 * @see [Documentation → Edge Architecture Specification](https://www.w3.org/TR/edge-arch/)
 * @see [Specification → Edge Architecture Specification](https://webconcepts.info/specs/W3C/TR/edge-arch)
 */
export type HttpHeaderSurrogateControl = 'Surrogate-Control';

/**
 * The TCN response header is used by a server to signal that
 * the resource is transparently negotiated.
 *
 * @see [Documentation → RFC 2295 §8.5](https://datatracker.ietf.org/doc/html/rfc2295#section-8.5)
 * @see [Specification → RFC 2295](https://webconcepts.info/specs/IETF/RFC/2295)
 */
export type HttpHeaderTCN = 'TCN';

/**
 * The "TE" header field in a request indicates what transfer
 * codings, besides chunked, the client is willing to accept in
 * response, and whether or not the client is willing to accept
 * trailer fields in a chunked transfer coding.
 *
 * @see [Documentation → RFC 7230 §4.3](https://datatracker.ietf.org/doc/html/rfc7230#section-4.3)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderTE = 'TE';

/**
 * An application server MUST include the TTL (Time-To-Live)
 * header field in its request for push message delivery. The
 * TTL header field contains a value in seconds that suggests
 * how long a push message is retained by the push service.
 *
 * @see [Documentation → RFC 8030 §5.2](https://datatracker.ietf.org/doc/html/rfc8030#section-5.2)
 * @see [Specification → RFC 8030](https://webconcepts.info/specs/IETF/RFC/8030)
 */
export type HttpHeaderTTL = 'TTL';

/**
 * Clients MAY include Timeout request headers in their LOCK
 * requests. However, the server is not required to honor or
 * even consider these requests.
 *
 * @see [Documentation → RFC 4918 §10.7](https://datatracker.ietf.org/doc/html/rfc4918#section-10.7)
 * @see [Specification → RFC 4918](https://webconcepts.info/specs/IETF/RFC/4918)
 */
export type HttpHeaderTimeout = 'Timeout';

/**
 * The Timing-Allow-Origin HTTP response header field can be
 * used to communicate a policy indicating origin(s) that are
 * allowed to see values of attributes that would have been
 * zero due to the cross-origin restrictions.
 *
 * @see [Documentation → Resource Timing](https://www.w3.org/TR/resource-timing/#timing-allow-origin)
 * @see [Specification → Resource Timing](https://www.w3.org/TR/resource-timing/)
 */
export type HttpHeaderTimingAllowOrigin = 'Timing-Allow-Origin';

/**
 * The title of the document. Not part of the document.
 * Isomorphic with the <title> element in HTML.
 *
 * @see [Documentation → RFC 4229 §2.2.11](https://datatracker.ietf.org/doc/html/rfc4229#section-2.2.11)
 * @see [Specification → RFC 4229](https://webconcepts.info/specs/IETF/RFC/4229)
 */
export type HttpHeaderTitle = 'Title';

/**
 * The Tk response header field is defined as an OPTIONAL means
 * for indicating the tracking status that applied to the
 * corresponding request, and as a REQUIRED means for
 * indicating that a state-changing request has resulted in an
 * interactive change to the tracking status.
 *
 * @see [Documentation → Tracking Preference Expression (DNT)](https://www.w3.org/TR/tracking-dnt/#response-header-field)
 * @see [Specification → Tracking Preference Expression (DNT)](https://webconcepts.info/specs/W3C/TR/tracking-dnt)
 */
export type HttpHeaderTk = 'Tk';

/**
 * A push message topic is a string carried in a Topic header
 * field. A topic is used to correlate push messages sent to
 * the same subscription and does not convey any other
 * semantics.
 *
 * @see [Documentation → RFC 8030 §5.4](https://datatracker.ietf.org/doc/html/rfc8030#section-5.4)
 * @see [Specification → RFC 8030](https://webconcepts.info/specs/IETF/RFC/8030)
 */
export type HttpHeaderTopic = 'Topic';

/**
 * When a message includes a message body encoded with the
 * chunked transfer coding and the sender desires to send
 * metadata in the form of trailer fields at the end of the
 * message, the sender SHOULD generate a Trailer header field
 * before the message body to indicate which fields will be
 * present in the trailers.
 *
 * @see [Documentation → RFC 7230 §4.4](https://datatracker.ietf.org/doc/html/rfc7230#section-4.4)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderTrailer = 'Trailer';

/**
 * The Transfer-Encoding header field lists the transfer coding
 * names corresponding to the sequence of transfer codings that
 * have been (or will be) applied to the payload body in order
 * to form the message body.
 *
 * @see [Documentation → RFC 7230 §3.3.1](https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.1)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderTransferEncoding = 'Transfer-Encoding';

/**
 * Clients include the Tunnel-Protocol header field in an HTTP
 * CONNECT request to indicate the application layer protocol
 * that will be used within the tunnel, or the set of protocols
 * that might be used within the tunnel.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-tunnel-protocol §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-tunnel-protocol#section-2)
 * @see [Specification → Internet Draft ietf-httpbis-tunnel-protocol](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-tunnel-protocol)
 */
export type HttpHeaderTunnelProtocol = 'Tunnel-Protocol';

/**
 * The URI header field has, in past versions of this
 * specification, been used as a combination of the existing
 * Location, Content-Location, and Vary header fields as well
 * as the future Alternates field. Its primary purpose has been
 * to include a list of additional URIs for the resource,
 * including names and mirror locations. However, it has become
 * clear that the combination of many different functions
 * within this single field has been a barrier to consistently
 * and correctly implementing any of those functions.
 * Furthermore, we believe that the identification of names and
 * mirror locations would be better performed via the Link
 * header field. The URI header field is therefore deprecated
 * in favor of those other fields.
 *
 * @see [Documentation → RFC 2068 §19.6.2.5](https://datatracker.ietf.org/doc/html/rfc2068#section-19.6.2.5)
 * @see [Specification → RFC 2068](https://webconcepts.info/specs/IETF/RFC/2068)
 */
export type HttpHeaderURI = 'URI';

/**
 * The "Upgrade" header field is intended to provide a simple
 * mechanism for transitioning from HTTP/1.1 to some other
 * protocol on the same connection. A client MAY send a list of
 * protocols in the Upgrade header field of a request to invite
 * the server to switch to one or more of those protocols, in
 * order of descending preference, before sending the final
 * response.
 *
 * @see [Documentation → RFC 7230 §6.7](https://datatracker.ietf.org/doc/html/rfc7230#section-6.7)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderUpgrade = 'Upgrade';

/**
 * The Upgrade-Insecure-Requests HTTP request header field
 * sends a signal to the server expressing the client's
 * preference for an encrypted and authenticated response, and
 * that it can successfully handle the
 * upgrade-insecure-requests directive in order to make that
 * preference as seamless as possible to provide.
 *
 * @see [Documentation → Upgrade Insecure Requests](https://www.w3.org/TR/upgrade-insecure-requests/#preference)
 * @see [Specification → Upgrade Insecure Requests](https://webconcepts.info/specs/W3C/TR/upgrade-insecure-requests)
 */
export type HttpHeaderUpgradeInsecureRequests = 'Upgrade-Insecure-Requests';

/**
 * The "Upload-Complete" request and response header field
 * indicates whether the corresponding upload is considered
 * complete. The Upload-Complete field value is a Boolean.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-resumable-upload](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-resumable-upload/#name-upload-complete)
 * @see [Specification → Internet Draft ietf-httpbis-resumable-upload](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-resumable-upload/)
 */
export type HttpHeaderUploadComplete = 'Upload-Complete';

/**
 * The "Upload-Offset" request and response header field
 * indicates the resumption offset of corresponding upload,
 * counted in bytes. The Upload-Offset field value is an
 * Integer.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-resumable-upload](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-resumable-upload/#name-upload-offset)
 * @see [Specification → Internet Draft ietf-httpbis-resumable-upload](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-resumable-upload/)
 */
export type HttpHeaderUploadOffset = 'Upload-Offset';

/**
 * An application server MAY include an Urgency header field in
 * its request for push message delivery. This header field
 * indicates the message urgency. The push service MUST NOT
 * forward the Urgency header field to the user agent. A push
 * message without the Urgency header field defaults to a value
 * of "normal".
 *
 * @see [Documentation → RFC 8030 §5.3](https://datatracker.ietf.org/doc/html/rfc8030#section-5.3)
 * @see [Specification → RFC 8030](https://webconcepts.info/specs/IETF/RFC/8030)
 */
export type HttpHeaderUrgency = 'Urgency';

/**
 * When responding to a HTTP Request, a server can advertise
 * that the response can be used as a dictionary for future
 * requests for URLs that match the rules specified in the
 * "Use-As-Dictionary" response header.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-compression-dictionary §2.1](https://httpwg.org/http-extensions/draft-ietf-httpbis-compression-dictionary.html#section-2.1)
 * @see [Specification → Internet Draft ietf-httpbis-compression-dictionary](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-compression-dictionary)
 */
export type HttpHeaderUseAsDictionary = 'Use-As-Dictionary';

/**
 * The "User-Agent" header field contains information about the
 * user agent originating the request, which is often used by
 * servers to help identify the scope of reported
 * interoperability problems, to work around or tailor
 * responses to avoid particular user agent limitations, and
 * for analytics regarding browser or operating system use.
 *
 * @see [Documentation → RFC 7231 §5.5.3](https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.3)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderUserAgent = 'User-Agent';

/**
 * The Variant-Key HTTP response header field is used to
 * indicate the value(s) from the Variants header field that
 * identify the representation it occurs within.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-variants §3](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-variants#section-3)
 * @see [Specification → Internet Draft ietf-httpbis-variants](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-variants)
 */
export type HttpHeaderVariantKey = 'Variant-Key';

/**
 * The Variant-Vary response header can be used in a choice
 * response to record any vary information which applies to the
 * variant data (the entity body combined with some of the
 * entity headers) contained in the response, rather than to
 * the response as a whole.
 *
 * @see [Documentation → RFC 2295 §8.6](https://datatracker.ietf.org/doc/html/rfc2295#section-8.6)
 * @see [Specification → RFC 2295](https://webconcepts.info/specs/IETF/RFC/2295)
 */
export type HttpHeaderVariantVary = 'Variant-Vary';

/**
 * The Variants HTTP response header field indicates what
 * representations are available for a given resource at the
 * time that the response is produced, by enumerating the
 * request header fields that it varies on, along with the
 * values that are available for each.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-variants §2](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-variants#section-2)
 * @see [Specification → Internet Draft ietf-httpbis-variants](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-variants)
 */
export type HttpHeaderVariants = 'Variants';

/**
 * The "Vary" header field in a response describes what parts
 * of a request message, aside from the method, Host header
 * field, and request target, might influence the origin
 * server's process for selecting and representing this
 * response. The value consists of either a single asterisk
 * ("*") or a list of header field names (case-insensitive).
 *
 * @see [Documentation → RFC 7231 §7.1.4](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.4)
 * @see [Specification → RFC 7231](https://webconcepts.info/specs/IETF/RFC/7231)
 */
export type HttpHeaderVary = 'Vary';

/**
 * The "Via" header field indicates the presence of
 * intermediate protocols and recipients between the user agent
 * and the server (on requests) or between the origin server
 * and the client (on responses), similar to the "Received"
 * header field in email (Section 3.6.7 of RFC 5322). Via can
 * be used for tracking message forwards, avoiding request
 * loops, and identifying the protocol capabilities of senders
 * along the request/response chain.
 *
 * @see [Documentation → RFC 7230 §5.7.1](https://datatracker.ietf.org/doc/html/rfc7230#section-5.7.1)
 * @see [Specification → RFC 7230](https://webconcepts.info/specs/IETF/RFC/7230)
 */
export type HttpHeaderVia = 'Via';

/**
 * If a server receives a request for an access-protected
 * object, and an acceptable Authorization header is not sent,
 * the server responds with a "401 Unauthorized" status code,
 * and a WWW-Authenticate header as per the framework defined
 * above.
 *
 * @see [Documentation → RFC 7616 §3.3](https://datatracker.ietf.org/doc/html/rfc7616#section-3.3)
 * @see [Documentation → RFC 7235 §4.4](https://datatracker.ietf.org/doc/html/rfc7235#section-4.4)
 * @see [Specification → RFC 7616](https://webconcepts.info/specs/IETF/RFC/7616)
 * @see [Specification → RFC 7235](https://webconcepts.info/specs/IETF/RFC/7235)
 */
export type HttpHeaderWWWAuthenticate = 'WWW-Authenticate';

/**
 * Want-Content-Digest indicates that the sender would like to
 * receive a content digest on messages associated with the
 * request URI and representation metadata, using the
 * Content-Digest field.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-digest-headers §4](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-digest-headers#section-4)
 * @see [Specification → Internet Draft ietf-httpbis-digest-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-digest-headers)
 */
export type HttpHeaderWantContentDigest = 'Want-Content-Digest';

/**
 * The Want-Digest message header field indicates the sender's
 * desire to receive an instance digest on messages associated
 * with the Request-URI.
 *
 * @see [Documentation → RFC 3230 §4.3.1](https://datatracker.ietf.org/doc/html/rfc3230#section-4.3.1)
 * @see [Specification → RFC 3230](https://webconcepts.info/specs/IETF/RFC/3230)
 */
export type HttpHeaderWantDigest = 'Want-Digest';

/**
 * Want-Repr-Digest indicates that the sender would like to
 * receive a representation digest on messages associated with
 * the request URI and representation metadata, using the
 * Repr-Digest field.
 *
 * @see [Documentation → Internet Draft ietf-httpbis-digest-headers §4](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-digest-headers#section-4)
 * @see [Specification → Internet Draft ietf-httpbis-digest-headers](https://webconcepts.info/specs/IETF/I-D/ietf-httpbis-digest-headers)
 */
export type HttpHeaderWantReprDigest = 'Want-Repr-Digest';

/**
 * The "Warning" header field is used to carry additional
 * information about the status or transformation of a message
 * that might not be reflected in the status code. This
 * information is typically used to warn about possible
 * incorrectness introduced by caching operations or
 * transformations applied to the payload of the message.
 *
 * @see [Documentation → RFC 7234 §5.5](https://datatracker.ietf.org/doc/html/rfc7234#section-5.5)
 * @see [Specification → RFC 7234](https://webconcepts.info/specs/IETF/RFC/7234)
 */
export type HttpHeaderWarning = 'Warning';

/**
 * The `X-Content-Type-Options` response header can be used to
 * require checking of a response’s `Content-Type` header
 * against the destination of a request.
 *
 * @see [Documentation → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/#x-content-type-options-header)
 * @see [Specification → WHATWG Fetch Standard](https://fetch.spec.whatwg.org/)
 */
export type HttpHeaderXContentTypeOptions = 'X-Content-Type-Options';

/**
 * The X-Frame-Options HTTP header field indicates a policy
 * that specifies whether the browser should render the
 * transmitted resource within a <frame> or an <iframe>.
 * Servers can declare this policy in the header of their HTTP
 * responses to prevent clickjacking attacks, which ensures
 * that their content is not embedded into other pages or
 * frames.
 *
 * @see [Documentation → RFC 7034 §2](https://datatracker.ietf.org/doc/html/rfc7034#section-2)
 * @see [Specification → RFC 7034](https://webconcepts.info/specs/IETF/RFC/7034)
 */
export type HttpHeaderXFrameOptions = 'X-Frame-Options';

/**
 * The traceparent header represents the incoming request in a
 * tracing system in a common format.
 *
 * @see [Documentation → Trace Context](https://www.w3.org/TR/trace-context/#traceparent-field)
 * @see [Specification → Trace Context](https://webconcepts.info/specs/W3C/TR/trace-context)
 */
export type HttpHeaderTraceparent = 'Traceparent';

/**
 * The tracestate HTTP header field conveys information about
 * request position in multiple distributed tracing graphs.
 *
 * @see [Documentation → Trace Context](https://www.w3.org/TR/trace-context/#tracestate-field)
 * @see [Specification → Trace Context](https://webconcepts.info/specs/W3C/TR/trace-context)
 */
export type HttpHeaderTracestate = 'Tracestate';

export type HttpHeader =
	| HttpHeaderAIM
	| HttpHeaderALPN
	| HttpHeaderAccept
	| HttpHeaderAcceptAdditions
	| HttpHeaderAcceptCH
	| HttpHeaderAcceptCharset
	| HttpHeaderAcceptDatetime
	| HttpHeaderAcceptEncoding
	| HttpHeaderAcceptFeatures
	| HttpHeaderAcceptIndefiniteRanges
	| HttpHeaderAcceptLanguage
	| HttpHeaderAcceptPatch
	| HttpHeaderAcceptPost
	| HttpHeaderAcceptProfile
	| HttpHeaderAcceptPushPolicy
	| HttpHeaderAcceptQuery
	| HttpHeaderAcceptRanges
	| HttpHeaderAcceptSignature
	| HttpHeaderAccessControlAllowCredentials
	| HttpHeaderAccessControlAllowHeaders
	| HttpHeaderAccessControlAllowMethods
	| HttpHeaderAccessControlAllowOrigin
	| HttpHeaderAccessControlExposeHeaders
	| HttpHeaderAccessControlMaxAge
	| HttpHeaderAccessControlRequestHeaders
	| HttpHeaderAccessControlRequestMethod
	| HttpHeaderAge
	| HttpHeaderAllow
	| HttpHeaderAltSvc
	| HttpHeaderAltUsed
	| HttpHeaderAlternates
	| HttpHeaderApplyToRedirectRef
	| HttpHeaderAuthenticationControl
	| HttpHeaderAuthenticationInfo
	| HttpHeaderAuthorization
	| HttpHeaderAvailableDictionary
	| HttpHeaderCExt
	| HttpHeaderCMan
	| HttpHeaderCOpt
	| HttpHeaderCPEP
	| HttpHeaderCPEPInfo
	| HttpHeaderCDNCacheControl
	| HttpHeaderCacheControl
	| HttpHeaderCacheGroups
	| HttpHeaderCacheGroupInvalidation
	| HttpHeaderCacheNT
	| HttpHeaderCacheStatus
	| HttpHeaderCalManagedID
	| HttpHeaderClearSiteData
	| HttpHeaderClientCert
	| HttpHeaderClientCertChain
	| HttpHeaderClose
	| HttpHeaderConnection
	| HttpHeaderContentBase
	| HttpHeaderContentDictionary
	| HttpHeaderContentDigest
	| HttpHeaderContentDisposition
	| HttpHeaderContentEncoding
	| HttpHeaderContentLanguage
	| HttpHeaderContentLength
	| HttpHeaderContentLocation
	| HttpHeaderContentMD5
	| HttpHeaderContentRange
	| HttpHeaderContentSecurityPolicy
	| HttpHeaderContentSecurityPolicyPin
	| HttpHeaderContentSecurityPolicyReportOnly
	| HttpHeaderContentSecurityPolicyReportOnlyPin
	| HttpHeaderContentSignature
	| HttpHeaderContentTranslationType
	| HttpHeaderContentType
	| HttpHeaderContentVersion
	| HttpHeaderContentWarning
	| HttpHeaderCookie
	| HttpHeaderCookie2
	| HttpHeaderCrossOriginEmbedderPolicy
	| HttpHeaderCrossOriginOpenerPolicy
	| HttpHeaderCrossOriginResourcePolicy
	| HttpHeaderDASL
	| HttpHeaderDAV
	| HttpHeaderDNT
	| HttpHeaderDate
	| HttpHeaderDeltaBase
	| HttpHeaderDeprecation
	| HttpHeaderDepth
	| HttpHeaderDestination
	| HttpHeaderDeviceMemory
	| HttpHeaderDictionaryID
	| HttpHeaderDigest
	| HttpHeaderDownlink
	| HttpHeaderEDIINTFeatures
	| HttpHeaderEPR
	| HttpHeaderETag
	| HttpHeaderEarlyData
	| HttpHeaderECT
	| HttpHeaderExpect
	| HttpHeaderExpectCT
	| HttpHeaderExpires
	| HttpHeaderExt
	| HttpHeaderFeaturePolicy
	| HttpHeaderForwarded
	| HttpHeaderFrom
	| HttpHeaderGETLocation
	| HttpHeaderHTTP2Settings
	| HttpHeaderHobareg
	| HttpHeaderHost
	| HttpHeaderIM
	| HttpHeaderIdempotencyKey
	| HttpHeaderIf
	| HttpHeaderIfMatch
	| HttpHeaderIfModifiedSince
	| HttpHeaderIfNoneMatch
	| HttpHeaderIfRange
	| HttpHeaderIfScheduleTagMatch
	| HttpHeaderIfUnmodifiedSince
	| HttpHeaderIncludeReferredTokenBindingID
	| HttpHeaderKey
	| HttpHeaderLabel
	| HttpHeaderLastEventID
	| HttpHeaderLastModified
	| HttpHeaderLink
	| HttpHeaderLinkTemplate
	| HttpHeaderLocation
	| HttpHeaderLockToken
	| HttpHeaderMIMEVersion
	| HttpHeaderMan
	| HttpHeaderMaxForwards
	| HttpHeaderMementoDatetime
	| HttpHeaderNEL
	| HttpHeaderNegotiate
	| HttpHeaderNice
	| HttpHeaderODataEntityId
	| HttpHeaderODataIsolation
	| HttpHeaderODataMaxVersion
	| HttpHeaderOSCORE
	| HttpHeaderOpt
	| HttpHeaderOptionalWWWAuthenticate
	| HttpHeaderOrderingType
	| HttpHeaderOrigin
	| HttpHeaderOriginCookie
	| HttpHeaderOverwrite
	| HttpHeaderP3P
	| HttpHeaderPEP
	| HttpHeaderPEPInfo
	| HttpHeaderPermissionsPolicy
	| HttpHeaderPOE
	| HttpHeaderPOELinks
	| HttpHeaderPosition
	| HttpHeaderPragma
	| HttpHeaderPrefer
	| HttpHeaderPreferPush
	| HttpHeaderPreferenceApplied
	| HttpHeaderPriority
	| HttpHeaderProxyAuthenticate
	| HttpHeaderProxyAuthenticationInfo
	| HttpHeaderProxyAuthorization
	| HttpHeaderProxyFeatures
	| HttpHeaderProxyInstruction
	| HttpHeaderProxyStatus
	| HttpHeaderPublic
	| HttpHeaderPublicKeyPins
	| HttpHeaderPublicKeyPinsReportOnly
	| HttpHeaderPushPolicy
	| HttpHeaderRange
	| HttpHeaderRateLimitLimit
	| HttpHeaderRateLimitRemaining
	| HttpHeaderRateLimitReset
	| HttpHeaderRedirectRef
	| HttpHeaderReferer
	| HttpHeaderReferrerPolicy
	| HttpHeaderRepeatabilityClientID
	| HttpHeaderRepeatabilityFirstSent
	| HttpHeaderRepeatabilityRequestID
	| HttpHeaderRepeatabilityResult
	| HttpHeaderReportTo
	| HttpHeaderReprDigest
	| HttpHeaderRetryAfter
	| HttpHeaderRTT
	| HttpHeaderSaveData
	| HttpHeaderSOAPAction
	| HttpHeaderSafe
	| HttpHeaderScheduleReply
	| HttpHeaderScheduleTag
	| HttpHeaderSecCHForcedColors
	| HttpHeaderSecCHPrefersColorScheme
	| HttpHeaderSecCHPrefersContrast
	| HttpHeaderSecCHPrefersReducedData
	| HttpHeaderSecCHPrefersReducedMotion
	| HttpHeaderSecCHUAArch
	| HttpHeaderSecCHUABitness
	| HttpHeaderSecCHUAFullVersion
	| HttpHeaderSecCHUAFullVersionList
	| HttpHeaderSecCHUAMobile
	| HttpHeaderSecCHUAModel
	| HttpHeaderSecCHUAPlatform
	| HttpHeaderSecCHUAPlatformVersion
	| HttpHeaderSecCHUAWoW64
	| HttpHeaderSecCOWL
	| HttpHeaderSecFetchDest
	| HttpHeaderSecFetchMode
	| HttpHeaderSecFetchSite
	| HttpHeaderSecFetchUser
	| HttpHeaderSecTokenBinding
	| HttpHeaderSecWebSocketAccept
	| HttpHeaderSecWebSocketExtensions
	| HttpHeaderSecWebSocketKey
	| HttpHeaderSecWebSocketProtocol
	| HttpHeaderSecWebSocketVersion
	| HttpHeaderSecurityScheme
	| HttpHeaderServer
	| HttpHeaderServerTiming
	| HttpHeaderServiceWorker
	| HttpHeaderServiceWorkerAllowed
	| HttpHeaderServiceWorkerNavigationPreload
	| HttpHeaderSetCookie
	| HttpHeaderSetCookie2
	| HttpHeaderSignature
	| HttpHeaderSignatureInput
	| HttpHeaderSlug
	| HttpHeaderSourceMap
	| HttpHeaderStatusURI
	| HttpHeaderStrictTransportSecurity
	| HttpHeaderSubOK
	| HttpHeaderSubst
	| HttpHeaderSunset
	| HttpHeaderSurrogateCapability
	| HttpHeaderSurrogateControl
	| HttpHeaderTCN
	| HttpHeaderTE
	| HttpHeaderTTL
	| HttpHeaderTimeout
	| HttpHeaderTimingAllowOrigin
	| HttpHeaderTitle
	| HttpHeaderTk
	| HttpHeaderTopic
	| HttpHeaderTrailer
	| HttpHeaderTransferEncoding
	| HttpHeaderTunnelProtocol
	| HttpHeaderURI
	| HttpHeaderUpgrade
	| HttpHeaderUpgradeInsecureRequests
	| HttpHeaderUploadComplete
	| HttpHeaderUploadOffset
	| HttpHeaderUrgency
	| HttpHeaderUseAsDictionary
	| HttpHeaderUserAgent
	| HttpHeaderVariantKey
	| HttpHeaderVariantVary
	| HttpHeaderVariants
	| HttpHeaderVary
	| HttpHeaderVia
	| HttpHeaderWWWAuthenticate
	| HttpHeaderWantContentDigest
	| HttpHeaderWantDigest
	| HttpHeaderWantReprDigest
	| HttpHeaderWarning
	| HttpHeaderXContentTypeOptions
	| HttpHeaderXFrameOptions
	| HttpHeaderTraceparent
	| HttpHeaderTracestate;

export type ForbiddenHttpRequestHeader =
	| HttpHeaderAcceptCharset
	| HttpHeaderAcceptEncoding
	| HttpHeaderAccessControlRequestHeaders
	| HttpHeaderAccessControlRequestMethod
	| HttpHeaderConnection
	| HttpHeaderContentLength
	| HttpHeaderCookie
	| HttpHeaderDNT
	| HttpHeaderDate
	| HttpHeaderExpect
	| HttpHeaderFeaturePolicy
	| HttpHeaderHost
	| HttpHeaderOrigin
	| HttpHeaderProxyAuthenticate
	| HttpHeaderProxyAuthenticationInfo
	| HttpHeaderProxyAuthorization
	| HttpHeaderProxyFeatures
	| HttpHeaderProxyInstruction
	| HttpHeaderProxyStatus
	| HttpHeaderReferer
	| HttpHeaderSecCHForcedColors
	| HttpHeaderSecCHPrefersColorScheme
	| HttpHeaderSecCHPrefersContrast
	| HttpHeaderSecCHPrefersReducedData
	| HttpHeaderSecCHPrefersReducedMotion
	| HttpHeaderSecCHUAArch
	| HttpHeaderSecCHUABitness
	| HttpHeaderSecCHUAFullVersion
	| HttpHeaderSecCHUAFullVersionList
	| HttpHeaderSecCHUAMobile
	| HttpHeaderSecCHUAModel
	| HttpHeaderSecCHUAPlatform
	| HttpHeaderSecCHUAPlatformVersion
	| HttpHeaderSecCHUAWoW64
	| HttpHeaderSecCOWL
	| HttpHeaderSecFetchDest
	| HttpHeaderSecFetchMode
	| HttpHeaderSecFetchSite
	| HttpHeaderSecFetchUser
	| HttpHeaderSecTokenBinding
	| HttpHeaderSecWebSocketAccept
	| HttpHeaderSecWebSocketExtensions
	| HttpHeaderSecWebSocketKey
	| HttpHeaderSecWebSocketProtocol
	| HttpHeaderSecWebSocketVersion
	| HttpHeaderSecurityScheme
	| HttpHeaderTE
	| HttpHeaderTrailer
	| HttpHeaderTransferEncoding
	| HttpHeaderUpgrade
	| HttpHeaderVia;

export type ForbiddenHttpResponseHeader =
	| HttpHeaderSetCookie
	| HttpHeaderSetCookie2;

export type HttpRequestHeader = Exclude<HttpHeader, ForbiddenHttpRequestHeader>;

export type HttpResponseHeader = Exclude<HttpHeader, ForbiddenHttpResponseHeader>;
